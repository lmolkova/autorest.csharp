// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace ServerReview.Models
{
    /// <summary> RestoreRequestBase is the base for RestoreRequest. </summary>
    public partial class RestoreRequestBase : BaseRequest
    {
        /// <summary> Initializes a new instance of RestoreRequestBase. </summary>
        /// <param name="restoreType"> Restore type: OLR, ALR, ILR, Copy. </param>
        /// <param name="sourceDatasource"> Source Datasource object. </param>
        /// <param name="forceOverwrite"> Overwrite if exists ?. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceDatasource"/> is null. </exception>
        public RestoreRequestBase(RestoreType restoreType, Datasource sourceDatasource, bool forceOverwrite)
        {
            if (sourceDatasource == null)
            {
                throw new ArgumentNullException(nameof(sourceDatasource));
            }

            RestoreType = restoreType;
            SourceDatasource = sourceDatasource;
            ILRRestoreCriteria = new ChangeTrackingList<ItemLevelRestoreCriteria>();
            RPCatalogInitializeParams = new ChangeTrackingDictionary<string, string>();
            DatastoreInitializeParams = new ChangeTrackingDictionary<string, string>();
            ForceOverwrite = forceOverwrite;
        }

        /// <summary> Initializes a new instance of RestoreRequestBase. </summary>
        /// <param name="jobLibraryInitializationParams"> The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs. </param>
        /// <param name="datasourceAccessToken"> Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases). </param>
        /// <param name="additionalProperties"> Additional Properties for extensibility. </param>
        /// <param name="restoreType"> Restore type: OLR, ALR, ILR, Copy. </param>
        /// <param name="sourceDatasourceSet"> Source DatasourceSet object. </param>
        /// <param name="sourceDatasource"> Source Datasource object. </param>
        /// <param name="targetDatasourceSet"> Target DatasourceSet object. </param>
        /// <param name="targetDatasource"> Target Datasource object. </param>
        /// <param name="restoreAsFilesTargetDetails"> Destination of RestoreAsFiles operation, when destination is not a datasource. </param>
        /// <param name="ilrRestoreCriteria"> Item level restore criteria. </param>
        /// <param name="restoreToRPId"> RPId to be used for restore. </param>
        /// <param name="restoreToPointInTime"> PointInTime to be used for restore. </param>
        /// <param name="rpCatalogInitializeParams"> The dictionary required to initialize the RPCatalog client library. We need to GET RPs of the src. </param>
        /// <param name="datastoreInitializeParams"> The dictionary required to initialize the Datastore client library. We need to GET Backup content of the source. </param>
        /// <param name="forceOverwrite"> Overwrite if exists ?. </param>
        internal RestoreRequestBase(string jobLibraryInitializationParams, DatasourceTokens datasourceAccessToken, IDictionary<string, string> additionalProperties, RestoreType restoreType, DatasourceSet sourceDatasourceSet, Datasource sourceDatasource, DatasourceSet targetDatasourceSet, Datasource targetDatasource, TargetDetails restoreAsFilesTargetDetails, IList<ItemLevelRestoreCriteria> ilrRestoreCriteria, string restoreToRPId, string restoreToPointInTime, IDictionary<string, string> rpCatalogInitializeParams, IDictionary<string, string> datastoreInitializeParams, bool forceOverwrite) : base(jobLibraryInitializationParams, datasourceAccessToken, additionalProperties)
        {
            RestoreType = restoreType;
            SourceDatasourceSet = sourceDatasourceSet;
            SourceDatasource = sourceDatasource;
            TargetDatasourceSet = targetDatasourceSet;
            TargetDatasource = targetDatasource;
            RestoreAsFilesTargetDetails = restoreAsFilesTargetDetails;
            ILRRestoreCriteria = ilrRestoreCriteria;
            RestoreToRPId = restoreToRPId;
            RestoreToPointInTime = restoreToPointInTime;
            RPCatalogInitializeParams = rpCatalogInitializeParams;
            DatastoreInitializeParams = datastoreInitializeParams;
            ForceOverwrite = forceOverwrite;
        }

        /// <summary> Restore type: OLR, ALR, ILR, Copy. </summary>
        public RestoreType RestoreType { get; set; }
        /// <summary> Source DatasourceSet object. </summary>
        public DatasourceSet SourceDatasourceSet { get; set; }
        /// <summary> Source Datasource object. </summary>
        public Datasource SourceDatasource { get; set; }
        /// <summary> Target DatasourceSet object. </summary>
        public DatasourceSet TargetDatasourceSet { get; set; }
        /// <summary> Target Datasource object. </summary>
        public Datasource TargetDatasource { get; set; }
        /// <summary> Destination of RestoreAsFiles operation, when destination is not a datasource. </summary>
        public TargetDetails RestoreAsFilesTargetDetails { get; set; }
        /// <summary> Item level restore criteria. </summary>
        public IList<ItemLevelRestoreCriteria> ILRRestoreCriteria { get; }
        /// <summary> RPId to be used for restore. </summary>
        public string RestoreToRPId { get; set; }
        /// <summary> PointInTime to be used for restore. </summary>
        public string RestoreToPointInTime { get; set; }
        /// <summary> The dictionary required to initialize the RPCatalog client library. We need to GET RPs of the src. </summary>
        public IDictionary<string, string> RPCatalogInitializeParams { get; }
        /// <summary> The dictionary required to initialize the Datastore client library. We need to GET Backup content of the source. </summary>
        public IDictionary<string, string> DatastoreInitializeParams { get; }
        /// <summary> Overwrite if exists ?. </summary>
        public bool ForceOverwrite { get; set; }
    }
}
