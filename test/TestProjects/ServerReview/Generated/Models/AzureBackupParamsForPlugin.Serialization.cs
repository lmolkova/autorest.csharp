// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace ServerReview.Models
{
    public partial class AzureBackupParamsForPlugin : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("retentionTag");
            writer.WriteObjectValue(RetentionTag);
            if (Optional.IsDefined(PolicyInfo))
            {
                writer.WritePropertyName("policyInfo");
                writer.WriteObjectValue(PolicyInfo);
            }
            if (Optional.IsDefined(PolicyParameters))
            {
                writer.WritePropertyName("policyParameters");
                writer.WriteObjectValue(PolicyParameters);
            }
            if (Optional.IsDefined(TriggerType))
            {
                writer.WritePropertyName("triggerType");
                writer.WriteStringValue(TriggerType.Value.ToString());
            }
            if (Optional.IsDefined(AutoHealSettings))
            {
                writer.WritePropertyName("autoHealSettings");
                writer.WriteObjectValue(AutoHealSettings);
            }
            writer.WritePropertyName("backupType");
            writer.WriteStringValue(BackupType);
            writer.WritePropertyName("objectType");
            writer.WriteStringValue(ObjectType);
            writer.WriteEndObject();
        }

        internal static AzureBackupParamsForPlugin DeserializeAzureBackupParamsForPlugin(JsonElement element)
        {
            RetentionTag retentionTag = default;
            Optional<PolicyInfo> policyInfo = default;
            Optional<PolicyParameters> policyParameters = default;
            Optional<TriggerType> triggerType = default;
            Optional<AutoHealSettings> autoHealSettings = default;
            string backupType = default;
            string objectType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("retentionTag"))
                {
                    retentionTag = RetentionTag.DeserializeRetentionTag(property.Value);
                    continue;
                }
                if (property.NameEquals("policyInfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policyInfo = PolicyInfo.DeserializePolicyInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("policyParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    policyParameters = PolicyParameters.DeserializePolicyParameters(property.Value);
                    continue;
                }
                if (property.NameEquals("triggerType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    triggerType = new TriggerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("autoHealSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoHealSettings = AutoHealSettings.DeserializeAutoHealSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("backupType"))
                {
                    backupType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
            }
            return new AzureBackupParamsForPlugin(objectType, backupType, retentionTag, policyInfo.Value, policyParameters.Value, Optional.ToNullable(triggerType), autoHealSettings.Value);
        }
    }
}
