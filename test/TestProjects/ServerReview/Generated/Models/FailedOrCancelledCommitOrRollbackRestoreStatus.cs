// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace ServerReview.Models
{
    /// <summary> CommitOrRollbackRestoreStatus for the failed or cancelled CommitOrRollbackRestore operation. </summary>
    public partial class FailedOrCancelledCommitOrRollbackRestoreStatus : CommitOrRollbackRestoreStatus
    {
        /// <summary> Initializes a new instance of FailedOrCancelledCommitOrRollbackRestoreStatus. </summary>
        internal FailedOrCancelledCommitOrRollbackRestoreStatus()
        {
        }

        /// <summary> Initializes a new instance of FailedOrCancelledCommitOrRollbackRestoreStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="originalDatasourceSizeInBytes"> Size of original datasource when the backup was created. </param>
        /// <param name="dataTransferredInBytes"> Size of data transferred as part of backup. </param>
        /// <param name="error"> Embedded Error Object. </param>
        internal FailedOrCancelledCommitOrRollbackRestoreStatus(IReadOnlyDictionary<string, string> additionalProperties, string telemetryData, int? retryAfterOnRetryableErrorInSeconds, long? originalDatasourceSizeInBytes, long? dataTransferredInBytes, Error error) : base(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, originalDatasourceSizeInBytes, dataTransferredInBytes)
        {
            Error = error;
        }

        /// <summary> Embedded Error Object. </summary>
        public Error Error { get; }
    }
}
