// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace ServerReview.Models
{
    /// <summary> Base class for Tagging Criteria. </summary>
    public partial class TaggingCriteria
    {
        /// <summary> Initializes a new instance of TaggingCriteria. </summary>
        /// <param name="tagInfo"> Retention tag information. </param>
        /// <param name="taggingPriority"> Retention Tag priority. </param>
        /// <param name="isDefault"> Specifies if tag is default. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tagInfo"/> is null. </exception>
        public TaggingCriteria(RetentionTag tagInfo, long taggingPriority, bool isDefault)
        {
            if (tagInfo == null)
            {
                throw new ArgumentNullException(nameof(tagInfo));
            }

            TagInfo = tagInfo;
            TaggingPriority = taggingPriority;
            IsDefault = isDefault;
            Criteria = new ChangeTrackingList<BackupCriteria>();
        }

        /// <summary> Initializes a new instance of TaggingCriteria. </summary>
        /// <param name="tagInfo"> Retention tag information. </param>
        /// <param name="taggingPriority"> Retention Tag priority. </param>
        /// <param name="isDefault"> Specifies if tag is default. </param>
        /// <param name="criteria"> Criteria which decides whether the tag can be applied to a triggered backup. </param>
        internal TaggingCriteria(RetentionTag tagInfo, long taggingPriority, bool isDefault, IList<BackupCriteria> criteria)
        {
            TagInfo = tagInfo;
            TaggingPriority = taggingPriority;
            IsDefault = isDefault;
            Criteria = criteria;
        }

        /// <summary> Retention tag information. </summary>
        public RetentionTag TagInfo { get; set; }
        /// <summary> Retention Tag priority. </summary>
        public long TaggingPriority { get; set; }
        /// <summary> Specifies if tag is default. </summary>
        public bool IsDefault { get; set; }
        /// <summary> Criteria which decides whether the tag can be applied to a triggered backup. </summary>
        public IList<BackupCriteria> Criteria { get; }
    }
}
