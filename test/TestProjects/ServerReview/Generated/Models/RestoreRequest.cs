// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace ServerReview.Models
{
    /// <summary> RestoreRequest for the Restore operation. </summary>
    public partial class RestoreRequest : RestoreRequestBase
    {
        /// <summary> Initializes a new instance of RestoreRequest. </summary>
        /// <param name="restoreType"> Restore type: OLR, ALR, ILR, Copy. </param>
        /// <param name="sourceDatasource"> Source Datasource object. </param>
        /// <param name="forceOverwrite"> Overwrite if exists ?. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceDatasource"/> is null. </exception>
        public RestoreRequest(RestoreType restoreType, Datasource sourceDatasource, bool forceOverwrite) : base(restoreType, sourceDatasource, forceOverwrite)
        {
            if (sourceDatasource == null)
            {
                throw new ArgumentNullException(nameof(sourceDatasource));
            }
        }

        /// <summary> Initializes a new instance of RestoreRequest. </summary>
        /// <param name="jobLibraryInitializationParams"> The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs. </param>
        /// <param name="datasourceAccessToken"> Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases). </param>
        /// <param name="additionalProperties"> Additional Properties for extensibility. </param>
        /// <param name="restoreType"> Restore type: OLR, ALR, ILR, Copy. </param>
        /// <param name="sourceDatasourceSet"> Source DatasourceSet object. </param>
        /// <param name="sourceDatasource"> Source Datasource object. </param>
        /// <param name="targetDatasourceSet"> Target DatasourceSet object. </param>
        /// <param name="targetDatasource"> Target Datasource object. </param>
        /// <param name="restoreAsFilesTargetDetails"> Destination of RestoreAsFiles operation, when destination is not a datasource. </param>
        /// <param name="ilrRestoreCriteria"> Item level restore criteria. </param>
        /// <param name="restoreToRPId"> RPId to be used for restore. </param>
        /// <param name="restoreToPointInTime"> PointInTime to be used for restore. </param>
        /// <param name="rpCatalogInitializeParams"> The dictionary required to initialize the RPCatalog client library. We need to GET RPs of the src. </param>
        /// <param name="datastoreInitializeParams"> The dictionary required to initialize the Datastore client library. We need to GET Backup content of the source. </param>
        /// <param name="forceOverwrite"> Overwrite if exists ?. </param>
        /// <param name="loopBackContext"> LoopbackContext returned from previous plugin calls, to be sent again. </param>
        internal RestoreRequest(string jobLibraryInitializationParams, DatasourceTokens datasourceAccessToken, IDictionary<string, string> additionalProperties, RestoreType restoreType, DatasourceSet sourceDatasourceSet, Datasource sourceDatasource, DatasourceSet targetDatasourceSet, Datasource targetDatasource, TargetDetails restoreAsFilesTargetDetails, IList<ItemLevelRestoreCriteria> ilrRestoreCriteria, string restoreToRPId, string restoreToPointInTime, IDictionary<string, string> rpCatalogInitializeParams, IDictionary<string, string> datastoreInitializeParams, bool forceOverwrite, string loopBackContext) : base(jobLibraryInitializationParams, datasourceAccessToken, additionalProperties, restoreType, sourceDatasourceSet, sourceDatasource, targetDatasourceSet, targetDatasource, restoreAsFilesTargetDetails, ilrRestoreCriteria, restoreToRPId, restoreToPointInTime, rpCatalogInitializeParams, datastoreInitializeParams, forceOverwrite)
        {
            LoopBackContext = loopBackContext;
        }

        /// <summary> LoopbackContext returned from previous plugin calls, to be sent again. </summary>
        public string LoopBackContext { get; set; }
    }
}
