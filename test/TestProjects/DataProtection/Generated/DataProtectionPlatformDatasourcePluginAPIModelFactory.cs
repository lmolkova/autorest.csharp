// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace DataProtection.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class DataProtectionPlatformDatasourcePluginAPIModelFactory
    {
        /// <summary> Initializes a new instance of Response. </summary>
        /// <param name="id"> As passed in the URL?s operationId query parameter. </param>
        /// <param name="kind"> Service-set extensible enum indicating operation?s kind. </param>
        /// <param name="status"> Service-set extensible enum indicating operation?s kind. </param>
        /// <param name="createdTime"> When the client creates the LRO. </param>
        /// <param name="startTime"> When server starts processing this LRO. </param>
        /// <param name="endTime"> When service finishes processing this LRO. </param>
        /// <param name="purgeTime"> Time at which server will GC this LRO. This is set after EndTime. </param>
        /// <param name="baseRequest"> Original request body. </param>
        /// <param name="notStartedResponse"> Set the Kind- specific response when Status = NotStarted. </param>
        /// <param name="runningResponse"> Set the Kind- specific response when Status = Running. </param>
        /// <param name="failedResponse"> Set the Kind- specific response when Status = Failed. </param>
        /// <param name="canceledResponse"> Set the Kind- specific response when Status = Cancelled. </param>
        /// <param name="succeededResponse"> Set the Kind- specific response when Status = Succeeded. </param>
        /// <returns> A new <see cref="Models.Response"/> instance for mocking. </returns>
        public static Response Response(string id = null, OperationType kind = default, ExecutionStatus status = default, DateTimeOffset createdTime = default, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, DateTimeOffset? purgeTime = null, BaseRequest baseRequest = null, BaseStatus notStartedResponse = null, BaseStatus runningResponse = null, BaseStatus failedResponse = null, BaseStatus canceledResponse = null, BaseStatus succeededResponse = null)
        {
            return new Response(id, kind, status, createdTime, startTime, endTime, purgeTime, baseRequest, notStartedResponse, runningResponse, failedResponse, canceledResponse, succeededResponse);
        }

        /// <summary> Initializes a new instance of BaseStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <returns> A new <see cref="Models.BaseStatus"/> instance for mocking. </returns>
        public static BaseStatus BaseStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new BaseStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds);
        }

        /// <summary> Initializes a new instance of RetentionTag. </summary>
        /// <param name="tagName"> Retention Tag Name to relate it to retention rule. </param>
        /// <param name="eTag"> Retention Tag version. </param>
        /// <param name="id"> Retention Tag version. </param>
        /// <returns> A new <see cref="Models.RetentionTag"/> instance for mocking. </returns>
        public static RetentionTag RetentionTag(string tagName = null, string eTag = null, string id = null)
        {
            return new RetentionTag(tagName, eTag, id);
        }

        /// <summary> Initializes a new instance of SyncResponse. </summary>
        /// <param name="id"> As passed in the URL?s operationId query parameter. </param>
        /// <param name="error"> Set the error when API is in failure path. </param>
        /// <returns> A new <see cref="Models.SyncResponse"/> instance for mocking. </returns>
        public static SyncResponse SyncResponse(string id = null, Error error = null)
        {
            return new SyncResponse(id, error);
        }

        /// <summary> Initializes a new instance of Error. </summary>
        /// <param name="message"> Message ? Human readable, non-localized. </param>
        /// <param name="details"> Additional related Errors. </param>
        /// <param name="code"> Unique code for this error. </param>
        /// <param name="target"> Target of the error. </param>
        /// <param name="innerError"> Inner Error. </param>
        /// <param name="properties"> Any key value pairs that can be injected inside error object. </param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(string message = null, IEnumerable<Error> details = null, string code = null, string target = null, InnerError innerError = null, IReadOnlyDictionary<string, string> properties = null)
        {
            details ??= new List<Error>();
            properties ??= new Dictionary<string, string>();

            return new Error(message, details?.ToList(), code, target, innerError, properties);
        }

        /// <summary> Initializes a new instance of InnerError. </summary>
        /// <param name="code"> Unique code for this error. </param>
        /// <param name="additionalInfo"> Any Key value pairs that can be provided to the client for additional  verbose information. </param>
        /// <param name="embeddedInnerError"> Child Inner Error, to allow Nesting. </param>
        /// <returns> A new <see cref="Models.InnerError"/> instance for mocking. </returns>
        public static InnerError InnerError(string code = null, IReadOnlyDictionary<string, string> additionalInfo = null, InnerError embeddedInnerError = null)
        {
            additionalInfo ??= new Dictionary<string, string>();

            return new InnerError(code, additionalInfo, embeddedInnerError);
        }

        /// <summary> Initializes a new instance of BackupStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <returns> A new <see cref="Models.BackupStatus"/> instance for mocking. </returns>
        public static BackupStatus BackupStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new BackupStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext);
        }

        /// <summary> Initializes a new instance of CommitOrRollbackBackupStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="datasourceSizeInBytes"> Size of datasource in bytes. </param>
        /// <param name="dataTransferredInBytes"> Size of data transferred as part of backup. </param>
        /// <returns> A new <see cref="Models.CommitOrRollbackBackupStatus"/> instance for mocking. </returns>
        public static CommitOrRollbackBackupStatus CommitOrRollbackBackupStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, long? datasourceSizeInBytes = null, long? dataTransferredInBytes = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new CommitOrRollbackBackupStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, datasourceSizeInBytes, dataTransferredInBytes);
        }

        /// <summary> Initializes a new instance of CommitOrRollbackRestoreStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="originalDatasourceSizeInBytes"> Size of original datasource when the backup was created. </param>
        /// <param name="dataTransferredInBytes"> Size of data transferred as part of backup. </param>
        /// <returns> A new <see cref="Models.CommitOrRollbackRestoreStatus"/> instance for mocking. </returns>
        public static CommitOrRollbackRestoreStatus CommitOrRollbackRestoreStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, long? originalDatasourceSizeInBytes = null, long? dataTransferredInBytes = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new CommitOrRollbackRestoreStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, originalDatasourceSizeInBytes, dataTransferredInBytes);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledBackupStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledBackupStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledBackupStatus FailedOrCancelledBackupStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledBackupStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext, error);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledCommitOrRollbackBackupStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="datasourceSizeInBytes"> Size of datasource in bytes. </param>
        /// <param name="dataTransferredInBytes"> Size of data transferred as part of backup. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledCommitOrRollbackBackupStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledCommitOrRollbackBackupStatus FailedOrCancelledCommitOrRollbackBackupStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, long? datasourceSizeInBytes = null, long? dataTransferredInBytes = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledCommitOrRollbackBackupStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, datasourceSizeInBytes, dataTransferredInBytes, error);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledCommitOrRollbackRestoreStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="originalDatasourceSizeInBytes"> Size of original datasource when the backup was created. </param>
        /// <param name="dataTransferredInBytes"> Size of data transferred as part of backup. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledCommitOrRollbackRestoreStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledCommitOrRollbackRestoreStatus FailedOrCancelledCommitOrRollbackRestoreStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, long? originalDatasourceSizeInBytes = null, long? dataTransferredInBytes = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledCommitOrRollbackRestoreStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, originalDatasourceSizeInBytes, dataTransferredInBytes, error);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledRestoreStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledRestoreStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledRestoreStatus FailedOrCancelledRestoreStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledRestoreStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext, error);
        }

        /// <summary> Initializes a new instance of RestoreStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <returns> A new <see cref="Models.RestoreStatus"/> instance for mocking. </returns>
        public static RestoreStatus RestoreStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new RestoreStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledStartProtectionStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledStartProtectionStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledStartProtectionStatus FailedOrCancelledStartProtectionStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledStartProtectionStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, error);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledStopProtectionStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledStopProtectionStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledStopProtectionStatus FailedOrCancelledStopProtectionStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledStopProtectionStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, error);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledUpdateProtectionStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledUpdateProtectionStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledUpdateProtectionStatus FailedOrCancelledUpdateProtectionStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledUpdateProtectionStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, error);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledValidateForBackupStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledValidateForBackupStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledValidateForBackupStatus FailedOrCancelledValidateForBackupStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledValidateForBackupStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext, error);
        }

        /// <summary> Initializes a new instance of ValidateForBackupStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <returns> A new <see cref="Models.ValidateForBackupStatus"/> instance for mocking. </returns>
        public static ValidateForBackupStatus ValidateForBackupStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new ValidateForBackupStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledValidateForProtectionStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledValidateForProtectionStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledValidateForProtectionStatus FailedOrCancelledValidateForProtectionStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledValidateForProtectionStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, error);
        }

        /// <summary> Initializes a new instance of FailedOrCancelledValidateForRestoreStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <param name="error"> Embedded Error Object. </param>
        /// <returns> A new <see cref="Models.FailedOrCancelledValidateForRestoreStatus"/> instance for mocking. </returns>
        public static FailedOrCancelledValidateForRestoreStatus FailedOrCancelledValidateForRestoreStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null, Error error = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new FailedOrCancelledValidateForRestoreStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext, error);
        }

        /// <summary> Initializes a new instance of ValidateForRestoreStatus. </summary>
        /// <param name="additionalProperties"> Any additional properties that should be returned along with this operation. </param>
        /// <param name="telemetryData"> Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry. </param>
        /// <param name="retryAfterOnRetryableErrorInSeconds"> If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this. </param>
        /// <param name="loopBackContext"> Json serialized Loopback Context. </param>
        /// <returns> A new <see cref="Models.ValidateForRestoreStatus"/> instance for mocking. </returns>
        public static ValidateForRestoreStatus ValidateForRestoreStatus(IReadOnlyDictionary<string, string> additionalProperties = null, string telemetryData = null, int? retryAfterOnRetryableErrorInSeconds = null, string loopBackContext = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new ValidateForRestoreStatus(additionalProperties, telemetryData, retryAfterOnRetryableErrorInSeconds, loopBackContext);
        }
    }
}
