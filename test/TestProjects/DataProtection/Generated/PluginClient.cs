// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using DataProtection.Models;

namespace DataProtection
{
    /// <summary> The Plugin service client. </summary>
    public partial class PluginClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PluginRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PluginClient for mocking. </summary>
        protected PluginClient()
        {
        }

        /// <summary> Initializes a new instance of PluginClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        internal PluginClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2022-03-01")
        {
            RestClient = new PluginRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Start the Backup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> BackupAsync(string operationId, string subscriptionId, string resourceId, string taskId, BackupRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.Backup");
            scope.Start();
            try
            {
                return await RestClient.BackupAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the Backup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> Backup(string operationId, string subscriptionId, string resourceId, string taskId, BackupRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.Backup");
            scope.Start();
            try
            {
                return RestClient.Backup(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the commitOrRollbackBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> CommitOrRollbackBackupAsync(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.CommitOrRollbackBackup");
            scope.Start();
            try
            {
                return await RestClient.CommitOrRollbackBackupAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the commitOrRollbackBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> CommitOrRollbackBackup(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.CommitOrRollbackBackup");
            scope.Start();
            try
            {
                return RestClient.CommitOrRollbackBackup(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the commitOrRollbackRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> CommitOrRollbackRestoreAsync(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.CommitOrRollbackRestore");
            scope.Start();
            try
            {
                return await RestClient.CommitOrRollbackRestoreAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the commitOrRollbackRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> CommitOrRollbackRestore(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.CommitOrRollbackRestore");
            scope.Start();
            try
            {
                return RestClient.CommitOrRollbackRestore(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the restore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> RestoreAsync(string operationId, string subscriptionId, string resourceId, string taskId, RestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.Restore");
            scope.Start();
            try
            {
                return await RestClient.RestoreAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the restore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> Restore(string operationId, string subscriptionId, string resourceId, string taskId, RestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.Restore");
            scope.Start();
            try
            {
                return RestClient.Restore(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the startProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> StartProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, StartProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.StartProtection");
            scope.Start();
            try
            {
                return await RestClient.StartProtectionAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the startProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> StartProtection(string operationId, string subscriptionId, string resourceId, string taskId, StartProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.StartProtection");
            scope.Start();
            try
            {
                return RestClient.StartProtection(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the stopProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> StopProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, StopProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.StopProtection");
            scope.Start();
            try
            {
                return await RestClient.StopProtectionAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the stopProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> StopProtection(string operationId, string subscriptionId, string resourceId, string taskId, StopProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.StopProtection");
            scope.Start();
            try
            {
                return RestClient.StopProtection(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the updateProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> UpdateProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, UpdateProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.UpdateProtection");
            scope.Start();
            try
            {
                return await RestClient.UpdateProtectionAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the updateProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> UpdateProtection(string operationId, string subscriptionId, string resourceId, string taskId, UpdateProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.UpdateProtection");
            scope.Start();
            try
            {
                return RestClient.UpdateProtection(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the validateForBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> ValidateForBackupAsync(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.ValidateForBackup");
            scope.Start();
            try
            {
                return await RestClient.ValidateForBackupAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the validateForBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> ValidateForBackup(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.ValidateForBackup");
            scope.Start();
            try
            {
                return RestClient.ValidateForBackup(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the validateForProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> ValidateForProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.ValidateForProtection");
            scope.Start();
            try
            {
                return await RestClient.ValidateForProtectionAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the validateForProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> ValidateForProtection(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.ValidateForProtection");
            scope.Start();
            try
            {
                return RestClient.ValidateForProtection(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the validateForRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Response>> ValidateForRestoreAsync(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.ValidateForRestore");
            scope.Start();
            try
            {
                return await RestClient.ValidateForRestoreAsync(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the validateForRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Response> ValidateForRestore(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PluginClient.ValidateForRestore");
            scope.Start();
            try
            {
                return RestClient.ValidateForRestore(operationId, subscriptionId, resourceId, taskId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
