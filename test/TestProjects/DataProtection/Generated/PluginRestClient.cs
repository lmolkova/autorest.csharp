// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using DataProtection.Models;

namespace DataProtection
{
    internal partial class PluginRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of PluginRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public PluginRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2022-03-01")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://pluginBaseUrl.com");
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateBackupRequest(string operationId, string subscriptionId, string resourceId, string taskId, BackupRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:backup", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the Backup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginBackupHeaders>> BackupAsync(string operationId, string subscriptionId, string resourceId, string taskId, BackupRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateBackupRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginBackupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the Backup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginBackupHeaders> Backup(string operationId, string subscriptionId, string resourceId, string taskId, BackupRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateBackupRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginBackupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCommitOrRollbackBackupRequest(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackBackupRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:commitOrRollbackBackup", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the commitOrRollbackBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginCommitOrRollbackBackupHeaders>> CommitOrRollbackBackupAsync(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCommitOrRollbackBackupRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginCommitOrRollbackBackupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the commitOrRollbackBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginCommitOrRollbackBackupHeaders> CommitOrRollbackBackup(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCommitOrRollbackBackupRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginCommitOrRollbackBackupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCommitOrRollbackRestoreRequest(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackRestoreRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:commitOrRollbackRestore", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the commitOrRollbackRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginCommitOrRollbackRestoreHeaders>> CommitOrRollbackRestoreAsync(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCommitOrRollbackRestoreRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginCommitOrRollbackRestoreHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the commitOrRollbackRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginCommitOrRollbackRestoreHeaders> CommitOrRollbackRestore(string operationId, string subscriptionId, string resourceId, string taskId, CommitOrRollbackRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCommitOrRollbackRestoreRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginCommitOrRollbackRestoreHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRestoreRequest(string operationId, string subscriptionId, string resourceId, string taskId, RestoreRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:restore", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the restore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginRestoreHeaders>> RestoreAsync(string operationId, string subscriptionId, string resourceId, string taskId, RestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateRestoreRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginRestoreHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the restore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginRestoreHeaders> Restore(string operationId, string subscriptionId, string resourceId, string taskId, RestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateRestoreRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginRestoreHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStartProtectionRequest(string operationId, string subscriptionId, string resourceId, string taskId, StartProtectionRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:startProtection", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the startProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginStartProtectionHeaders>> StartProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, StartProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateStartProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginStartProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the startProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginStartProtectionHeaders> StartProtection(string operationId, string subscriptionId, string resourceId, string taskId, StartProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateStartProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginStartProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateStopProtectionRequest(string operationId, string subscriptionId, string resourceId, string taskId, StopProtectionRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:stopProtection", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the stopProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginStopProtectionHeaders>> StopProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, StopProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateStopProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginStopProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the stopProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginStopProtectionHeaders> StopProtection(string operationId, string subscriptionId, string resourceId, string taskId, StopProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateStopProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginStopProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateProtectionRequest(string operationId, string subscriptionId, string resourceId, string taskId, UpdateProtectionRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:updateProtection", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the updateProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginUpdateProtectionHeaders>> UpdateProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, UpdateProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginUpdateProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the updateProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginUpdateProtectionHeaders> UpdateProtection(string operationId, string subscriptionId, string resourceId, string taskId, UpdateProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginUpdateProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateValidateForBackupRequest(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForBackupRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:validateForBackup", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the validateForBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginValidateForBackupHeaders>> ValidateForBackupAsync(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateValidateForBackupRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginValidateForBackupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the validateForBackup operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginValidateForBackupHeaders> ValidateForBackup(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForBackupRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateValidateForBackupRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginValidateForBackupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateValidateForProtectionRequest(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForProtectionRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:validateForProtection", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the validateForProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginValidateForProtectionHeaders>> ValidateForProtectionAsync(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateValidateForProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginValidateForProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the validateForProtection operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginValidateForProtectionHeaders> ValidateForProtection(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForProtectionRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateValidateForProtectionRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginValidateForProtectionHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateValidateForRestoreRequest(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForRestoreRequest parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/plugin:validateForRestore", false);
            uri.AppendQuery("operationId", operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("subscription-id", subscriptionId);
            request.Headers.Add("resource-id", resourceId);
            request.Headers.Add("task-id", taskId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Start the validateForRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<ResponseWithHeaders<Response, PluginValidateForRestoreHeaders>> ValidateForRestoreAsync(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateValidateForRestoreRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new PluginValidateForRestoreHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Start the validateForRestore operation. </summary>
        /// <param name="operationId"> Unique id of the LRO. </param>
        /// <param name="subscriptionId"> SubscriptionId of the resource. </param>
        /// <param name="resourceId"> unique id of the resource. </param>
        /// <param name="taskId"> unique id of the current task. </param>
        /// <param name="parameters"> Request body for operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/>, <paramref name="subscriptionId"/>, <paramref name="resourceId"/>, <paramref name="taskId"/> or <paramref name="parameters"/> is null. </exception>
        public ResponseWithHeaders<Response, PluginValidateForRestoreHeaders> ValidateForRestore(string operationId, string subscriptionId, string resourceId, string taskId, ValidateForRestoreRequest parameters, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            if (resourceId == null)
            {
                throw new ArgumentNullException(nameof(resourceId));
            }
            if (taskId == null)
            {
                throw new ArgumentNullException(nameof(taskId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateValidateForRestoreRequest(operationId, subscriptionId, resourceId, taskId, parameters);
            _pipeline.Send(message, cancellationToken);
            var headers = new PluginValidateForRestoreHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Response value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Response.DeserializeResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
