// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace DataProtection.Models
{
    public partial class DatasourceSet : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("resourceID");
            writer.WriteStringValue(ResourceID);
            if (Optional.IsDefined(ResourceUri))
            {
                writer.WritePropertyName("resourceUri");
                writer.WriteStringValue(ResourceUri);
            }
            if (Optional.IsDefined(BaseUri))
            {
                writer.WritePropertyName("baseUri");
                writer.WriteStringValue(BaseUri);
            }
            if (Optional.IsDefined(DatasourceType))
            {
                writer.WritePropertyName("datasourceType");
                writer.WriteStringValue(DatasourceType);
            }
            if (Optional.IsDefined(ResourceName))
            {
                writer.WritePropertyName("resourceName");
                writer.WriteStringValue(ResourceName);
            }
            if (Optional.IsDefined(ResourceType))
            {
                writer.WritePropertyName("resourceType");
                writer.WriteStringValue(ResourceType);
            }
            if (Optional.IsDefined(ResourceLocation))
            {
                writer.WritePropertyName("resourceLocation");
                writer.WriteStringValue(ResourceLocation);
            }
            if (Optional.IsDefined(ResourceProperties))
            {
                writer.WritePropertyName("resourceProperties");
                writer.WriteObjectValue(ResourceProperties);
            }
            if (Optional.IsDefined(ObjectType))
            {
                writer.WritePropertyName("objectType");
                writer.WriteStringValue(ObjectType);
            }
            writer.WriteEndObject();
        }

        internal static DatasourceSet DeserializeDatasourceSet(JsonElement element)
        {
            string resourceID = default;
            Optional<string> resourceUri = default;
            Optional<string> baseUri = default;
            Optional<string> datasourceType = default;
            Optional<string> resourceName = default;
            Optional<string> resourceType = default;
            Optional<string> resourceLocation = default;
            Optional<BaseResourceProperties> resourceProperties = default;
            Optional<string> objectType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceID"))
                {
                    resourceID = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceUri"))
                {
                    resourceUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseUri"))
                {
                    baseUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datasourceType"))
                {
                    datasourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceName"))
                {
                    resourceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceLocation"))
                {
                    resourceLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceProperties = BaseResourceProperties.DeserializeBaseResourceProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
            }
            return new DatasourceSet(resourceID, resourceUri.Value, baseUri.Value, datasourceType.Value, resourceName.Value, resourceType.Value, resourceLocation.Value, resourceProperties.Value, objectType.Value);
        }
    }
}
