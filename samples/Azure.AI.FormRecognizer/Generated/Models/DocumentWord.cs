// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.FormRecognizer.Models
{
    /// <summary> A word object consisting of a contiguous sequence of characters.  For non-space delimited languages, such as Chinese, Japanese, and Korean, each character is represented as its own word. </summary>
    public partial class DocumentWord
    {
        /// <summary> Initializes a new instance of DocumentWord. </summary>
        /// <param name="content"> Text content of the word. </param>
        /// <param name="span"> Location of the word in the reading order concatenated content. </param>
        /// <param name="confidence"> Confidence of correctly extracting the word. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> or <paramref name="span"/> is null. </exception>
        internal DocumentWord(string content, DocumentSpan span, float confidence)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }
            if (span == null)
            {
                throw new ArgumentNullException(nameof(span));
            }

            Content = content;
            BoundingBox = new ChangeTrackingList<float>();
            Span = span;
            Confidence = confidence;
        }

        /// <summary> Initializes a new instance of DocumentWord. </summary>
        /// <param name="content"> Text content of the word. </param>
        /// <param name="boundingBox"> Bounding box of the word. </param>
        /// <param name="span"> Location of the word in the reading order concatenated content. </param>
        /// <param name="confidence"> Confidence of correctly extracting the word. </param>
        internal DocumentWord(string content, IReadOnlyList<float> boundingBox, DocumentSpan span, float confidence)
        {
            Content = content;
            BoundingBox = boundingBox;
            Span = span;
            Confidence = confidence;
        }

        /// <summary> Text content of the word. </summary>
        public string Content { get; }
        /// <summary> Bounding box of the word. </summary>
        public IReadOnlyList<float> BoundingBox { get; }
        /// <summary> Location of the word in the reading order concatenated content. </summary>
        public DocumentSpan Span { get; }
        /// <summary> Confidence of correctly extracting the word. </summary>
        public float Confidence { get; }
    }
}
