// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.AI.FormRecognizer.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.FormRecognizer
{
    /// <summary> The NewFormRecognizer service client. </summary>
    public partial class NewFormRecognizerClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal NewFormRecognizerRestClient RestClient { get; }

        /// <summary> Initializes a new instance of NewFormRecognizerClient for mocking. </summary>
        protected NewFormRecognizerClient()
        {
        }

        /// <summary> Initializes a new instance of NewFormRecognizerClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com). </param>
        internal NewFormRecognizerClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            RestClient = new NewFormRecognizerRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the result of document analysis. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="resultId"> Analyze operation result ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnalyzeResultOperation>> GetAnalyzeDocumentResultAsync(string modelId, string resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetAnalyzeDocumentResult");
            scope.Start();
            try
            {
                return await RestClient.GetAnalyzeDocumentResultAsync(modelId, resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the result of document analysis. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="resultId"> Analyze operation result ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalyzeResultOperation> GetAnalyzeDocumentResult(string modelId, string resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetAnalyzeDocumentResult");
            scope.Start();
            try
            {
                return RestClient.GetAnalyzeDocumentResult(modelId, resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates authorization to copy a model to this location with specified modelId and optional description. </summary>
        /// <param name="authorizeCopyRequest"> The AuthorizeCopyRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CopyAuthorization>> AuthorizeCopyDocumentModelAsync(AuthorizeCopyRequest authorizeCopyRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.AuthorizeCopyDocumentModel");
            scope.Start();
            try
            {
                return await RestClient.AuthorizeCopyDocumentModelAsync(authorizeCopyRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates authorization to copy a model to this location with specified modelId and optional description. </summary>
        /// <param name="authorizeCopyRequest"> The AuthorizeCopyRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CopyAuthorization> AuthorizeCopyDocumentModel(AuthorizeCopyRequest authorizeCopyRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.AuthorizeCopyDocumentModel");
            scope.Start();
            try
            {
                return RestClient.AuthorizeCopyDocumentModel(authorizeCopyRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets operation info. </summary>
        /// <param name="operationId"> Unique operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GetOperationResponse>> GetOperationAsync(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetOperation");
            scope.Start();
            try
            {
                return await RestClient.GetOperationAsync(operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets operation info. </summary>
        /// <param name="operationId"> Unique operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GetOperationResponse> GetOperation(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetOperation");
            scope.Start();
            try
            {
                return RestClient.GetOperation(operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets detailed model information. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DocumentModelInfo>> GetModelAsync(string modelId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetModel");
            scope.Start();
            try
            {
                return await RestClient.GetModelAsync(modelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets detailed model information. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DocumentModelInfo> GetModel(string modelId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetModel");
            scope.Start();
            try
            {
                return RestClient.GetModel(modelId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes model. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteModelAsync(string modelId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.DeleteModel");
            scope.Start();
            try
            {
                return await RestClient.DeleteModelAsync(modelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes model. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteModel(string modelId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.DeleteModel");
            scope.Start();
            try
            {
                return RestClient.DeleteModel(modelId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return basic info about the current resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GetInfoResponse>> GetInfoAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetInfo");
            scope.Start();
            try
            {
                return await RestClient.GetInfoAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return basic info about the current resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GetInfoResponse> GetInfo(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetInfo");
            scope.Start();
            try
            {
                return RestClient.GetInfo(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<OperationInfo> GetOperationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OperationInfo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.GetOperationsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OperationInfo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.GetOperationsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<OperationInfo> GetOperations(CancellationToken cancellationToken = default)
        {
            Page<OperationInfo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetOperations");
                scope.Start();
                try
                {
                    var response = RestClient.GetOperations(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OperationInfo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetOperations");
                scope.Start();
                try
                {
                    var response = RestClient.GetOperationsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all models. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ModelSummary> GetModelsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ModelSummary>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetModels");
                scope.Start();
                try
                {
                    var response = await RestClient.GetModelsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ModelSummary>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetModels");
                scope.Start();
                try
                {
                    var response = await RestClient.GetModelsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all models. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ModelSummary> GetModels(CancellationToken cancellationToken = default)
        {
            Page<ModelSummary> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetModels");
                scope.Start();
                try
                {
                    var response = RestClient.GetModels(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ModelSummary> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.GetModels");
                scope.Start();
                try
                {
                    var response = RestClient.GetModelsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Analyzes document with model. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="pages"> List of 1-based page numbers to analyze.  Ex. &quot;1-3,5,7-9&quot;. </param>
        /// <param name="locale"> Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. &quot;en&quot;, &quot;fr&quot;) or BCP 47 language tag (ex. &quot;en-US&quot;). </param>
        /// <param name="stringIndexType"> Method used to compute string offset and length. </param>
        /// <param name="analyzeRequest"> Analyze request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> is null. </exception>
        public virtual async Task<NewFormRecognizerAnalyzeDocumentOperation> StartAnalyzeDocumentAsync(string modelId, ContentType1 contentType, IEnumerable<string> pages = null, string locale = null, StringIndexType? stringIndexType = null, Stream analyzeRequest = null, CancellationToken cancellationToken = default)
        {
            if (modelId == null)
            {
                throw new ArgumentNullException(nameof(modelId));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartAnalyzeDocument");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeDocumentAsync(modelId, contentType, pages, locale, stringIndexType, analyzeRequest, cancellationToken).ConfigureAwait(false);
                return new NewFormRecognizerAnalyzeDocumentOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeDocumentRequest(modelId, contentType, pages, locale, stringIndexType, analyzeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyzes document with model. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="pages"> List of 1-based page numbers to analyze.  Ex. &quot;1-3,5,7-9&quot;. </param>
        /// <param name="locale"> Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. &quot;en&quot;, &quot;fr&quot;) or BCP 47 language tag (ex. &quot;en-US&quot;). </param>
        /// <param name="stringIndexType"> Method used to compute string offset and length. </param>
        /// <param name="analyzeRequest"> Analyze request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> is null. </exception>
        public virtual NewFormRecognizerAnalyzeDocumentOperation StartAnalyzeDocument(string modelId, ContentType1 contentType, IEnumerable<string> pages = null, string locale = null, StringIndexType? stringIndexType = null, Stream analyzeRequest = null, CancellationToken cancellationToken = default)
        {
            if (modelId == null)
            {
                throw new ArgumentNullException(nameof(modelId));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartAnalyzeDocument");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeDocument(modelId, contentType, pages, locale, stringIndexType, analyzeRequest, cancellationToken);
                return new NewFormRecognizerAnalyzeDocumentOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeDocumentRequest(modelId, contentType, pages, locale, stringIndexType, analyzeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyzes document with model. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="pages"> List of 1-based page numbers to analyze.  Ex. &quot;1-3,5,7-9&quot;. </param>
        /// <param name="locale"> Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. &quot;en&quot;, &quot;fr&quot;) or BCP 47 language tag (ex. &quot;en-US&quot;). </param>
        /// <param name="stringIndexType"> Method used to compute string offset and length. </param>
        /// <param name="analyzeRequest"> Analyze request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> is null. </exception>
        public virtual async Task<NewFormRecognizerAnalyzeDocumentOperation> StartAnalyzeDocumentAsync(string modelId, IEnumerable<string> pages = null, string locale = null, StringIndexType? stringIndexType = null, AnalyzeDocumentRequest analyzeRequest = null, CancellationToken cancellationToken = default)
        {
            if (modelId == null)
            {
                throw new ArgumentNullException(nameof(modelId));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartAnalyzeDocument");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeDocumentAsync(modelId, pages, locale, stringIndexType, analyzeRequest, cancellationToken).ConfigureAwait(false);
                return new NewFormRecognizerAnalyzeDocumentOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeDocumentRequest(modelId, pages, locale, stringIndexType, analyzeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyzes document with model. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="pages"> List of 1-based page numbers to analyze.  Ex. &quot;1-3,5,7-9&quot;. </param>
        /// <param name="locale"> Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. &quot;en&quot;, &quot;fr&quot;) or BCP 47 language tag (ex. &quot;en-US&quot;). </param>
        /// <param name="stringIndexType"> Method used to compute string offset and length. </param>
        /// <param name="analyzeRequest"> Analyze request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> is null. </exception>
        public virtual NewFormRecognizerAnalyzeDocumentOperation StartAnalyzeDocument(string modelId, IEnumerable<string> pages = null, string locale = null, StringIndexType? stringIndexType = null, AnalyzeDocumentRequest analyzeRequest = null, CancellationToken cancellationToken = default)
        {
            if (modelId == null)
            {
                throw new ArgumentNullException(nameof(modelId));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartAnalyzeDocument");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeDocument(modelId, pages, locale, stringIndexType, analyzeRequest, cancellationToken);
                return new NewFormRecognizerAnalyzeDocumentOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeDocumentRequest(modelId, pages, locale, stringIndexType, analyzeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Builds a custom document analysis model. </summary>
        /// <param name="buildRequest"> Building request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildRequest"/> is null. </exception>
        public virtual async Task<NewFormRecognizerBuildDocumentModelOperation> StartBuildDocumentModelAsync(BuildDocumentModelRequest buildRequest, CancellationToken cancellationToken = default)
        {
            if (buildRequest == null)
            {
                throw new ArgumentNullException(nameof(buildRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartBuildDocumentModel");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.BuildDocumentModelAsync(buildRequest, cancellationToken).ConfigureAwait(false);
                return new NewFormRecognizerBuildDocumentModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateBuildDocumentModelRequest(buildRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Builds a custom document analysis model. </summary>
        /// <param name="buildRequest"> Building request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="buildRequest"/> is null. </exception>
        public virtual NewFormRecognizerBuildDocumentModelOperation StartBuildDocumentModel(BuildDocumentModelRequest buildRequest, CancellationToken cancellationToken = default)
        {
            if (buildRequest == null)
            {
                throw new ArgumentNullException(nameof(buildRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartBuildDocumentModel");
            scope.Start();
            try
            {
                var originalResponse = RestClient.BuildDocumentModel(buildRequest, cancellationToken);
                return new NewFormRecognizerBuildDocumentModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateBuildDocumentModelRequest(buildRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new model from document types of existing models. </summary>
        /// <param name="composeRequest"> The ComposeDocumentModelRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="composeRequest"/> is null. </exception>
        public virtual async Task<NewFormRecognizerComposeDocumentModelOperation> StartComposeDocumentModelAsync(ComposeDocumentModelRequest composeRequest, CancellationToken cancellationToken = default)
        {
            if (composeRequest == null)
            {
                throw new ArgumentNullException(nameof(composeRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartComposeDocumentModel");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ComposeDocumentModelAsync(composeRequest, cancellationToken).ConfigureAwait(false);
                return new NewFormRecognizerComposeDocumentModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateComposeDocumentModelRequest(composeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new model from document types of existing models. </summary>
        /// <param name="composeRequest"> The ComposeDocumentModelRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="composeRequest"/> is null. </exception>
        public virtual NewFormRecognizerComposeDocumentModelOperation StartComposeDocumentModel(ComposeDocumentModelRequest composeRequest, CancellationToken cancellationToken = default)
        {
            if (composeRequest == null)
            {
                throw new ArgumentNullException(nameof(composeRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartComposeDocumentModel");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ComposeDocumentModel(composeRequest, cancellationToken);
                return new NewFormRecognizerComposeDocumentModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateComposeDocumentModelRequest(composeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Copies model to the target resource, region, and modelId. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="copyToRequest"> The CopyAuthorization to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> or <paramref name="copyToRequest"/> is null. </exception>
        public virtual async Task<NewFormRecognizerCopyDocumentModelToOperation> StartCopyDocumentModelToAsync(string modelId, CopyAuthorization copyToRequest, CancellationToken cancellationToken = default)
        {
            if (modelId == null)
            {
                throw new ArgumentNullException(nameof(modelId));
            }
            if (copyToRequest == null)
            {
                throw new ArgumentNullException(nameof(copyToRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartCopyDocumentModelTo");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CopyDocumentModelToAsync(modelId, copyToRequest, cancellationToken).ConfigureAwait(false);
                return new NewFormRecognizerCopyDocumentModelToOperation(_clientDiagnostics, _pipeline, RestClient.CreateCopyDocumentModelToRequest(modelId, copyToRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Copies model to the target resource, region, and modelId. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="copyToRequest"> The CopyAuthorization to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="modelId"/> or <paramref name="copyToRequest"/> is null. </exception>
        public virtual NewFormRecognizerCopyDocumentModelToOperation StartCopyDocumentModelTo(string modelId, CopyAuthorization copyToRequest, CancellationToken cancellationToken = default)
        {
            if (modelId == null)
            {
                throw new ArgumentNullException(nameof(modelId));
            }
            if (copyToRequest == null)
            {
                throw new ArgumentNullException(nameof(copyToRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("NewFormRecognizerClient.StartCopyDocumentModelTo");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CopyDocumentModelTo(modelId, copyToRequest, cancellationToken);
                return new NewFormRecognizerCopyDocumentModelToOperation(_clientDiagnostics, _pipeline, RestClient.CreateCopyDocumentModelToRequest(modelId, copyToRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
