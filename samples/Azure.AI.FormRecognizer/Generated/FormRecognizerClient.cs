// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.AI.FormRecognizer.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.FormRecognizer
{
    /// <summary> The FormRecognizer service client. </summary>
    public partial class FormRecognizerClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal FormRecognizerRestClient RestClient { get; }

        /// <summary> Initializes a new instance of FormRecognizerClient for mocking. </summary>
        protected FormRecognizerClient()
        {
        }

        /// <summary> Initializes a new instance of FormRecognizerClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com). </param>
        internal FormRecognizerClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            RestClient = new FormRecognizerRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get detailed information about a custom model. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="includeKeys"> Include list of extracted keys in model information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Model>> GetCustomModelAsync(Guid modelId, bool? includeKeys = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetCustomModel");
            scope.Start();
            try
            {
                return await RestClient.GetCustomModelAsync(modelId, includeKeys, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get detailed information about a custom model. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="includeKeys"> Include list of extracted keys in model information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Model> GetCustomModel(Guid modelId, bool? includeKeys = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetCustomModel");
            scope.Start();
            try
            {
                return RestClient.GetCustomModel(modelId, includeKeys, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Mark model for deletion. Model artifacts will be permanently removed within a predetermined period. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteCustomModelAsync(Guid modelId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.DeleteCustomModel");
            scope.Start();
            try
            {
                return await RestClient.DeleteCustomModelAsync(modelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Mark model for deletion. Model artifacts will be permanently removed within a predetermined period. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteCustomModel(Guid modelId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.DeleteCustomModel");
            scope.Start();
            try
            {
                return RestClient.DeleteCustomModel(modelId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Obtain current status and the result of the analyze form operation. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnalyzeOperationResult>> GetAnalyzeFormResultAsync(Guid modelId, Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeFormResult");
            scope.Start();
            try
            {
                return await RestClient.GetAnalyzeFormResultAsync(modelId, resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Obtain current status and the result of the analyze form operation. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalyzeOperationResult> GetAnalyzeFormResult(Guid modelId, Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeFormResult");
            scope.Start();
            try
            {
                return RestClient.GetAnalyzeFormResult(modelId, resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Obtain current status and the result of a custom model copy operation. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="resultId"> Copy operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CopyOperationResult>> GetCustomModelCopyResultAsync(Guid modelId, Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetCustomModelCopyResult");
            scope.Start();
            try
            {
                return await RestClient.GetCustomModelCopyResultAsync(modelId, resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Obtain current status and the result of a custom model copy operation. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="resultId"> Copy operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CopyOperationResult> GetCustomModelCopyResult(Guid modelId, Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetCustomModelCopyResult");
            scope.Start();
            try
            {
                return RestClient.GetCustomModelCopyResult(modelId, resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generate authorization to copy a model into the target Form Recognizer resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CopyAuthorizationResult>> GenerateModelCopyAuthorizationAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GenerateModelCopyAuthorization");
            scope.Start();
            try
            {
                return await RestClient.GenerateModelCopyAuthorizationAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generate authorization to copy a model into the target Form Recognizer resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CopyAuthorizationResult> GenerateModelCopyAuthorization(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GenerateModelCopyAuthorization");
            scope.Start();
            try
            {
                return RestClient.GenerateModelCopyAuthorization(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze business card operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnalyzeOperationResult>> GetAnalyzeBusinessCardResultAsync(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeBusinessCardResult");
            scope.Start();
            try
            {
                return await RestClient.GetAnalyzeBusinessCardResultAsync(resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze business card operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalyzeOperationResult> GetAnalyzeBusinessCardResult(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeBusinessCardResult");
            scope.Start();
            try
            {
                return RestClient.GetAnalyzeBusinessCardResult(resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze invoice operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnalyzeOperationResult>> GetAnalyzeInvoiceResultAsync(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeInvoiceResult");
            scope.Start();
            try
            {
                return await RestClient.GetAnalyzeInvoiceResultAsync(resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze invoice operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalyzeOperationResult> GetAnalyzeInvoiceResult(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeInvoiceResult");
            scope.Start();
            try
            {
                return RestClient.GetAnalyzeInvoiceResult(resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze ID operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnalyzeOperationResult>> GetAnalyzeIdDocumentResultAsync(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeIdDocumentResult");
            scope.Start();
            try
            {
                return await RestClient.GetAnalyzeIdDocumentResultAsync(resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze ID operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalyzeOperationResult> GetAnalyzeIdDocumentResult(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeIdDocumentResult");
            scope.Start();
            try
            {
                return RestClient.GetAnalyzeIdDocumentResult(resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze receipt operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnalyzeOperationResult>> GetAnalyzeReceiptResultAsync(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeReceiptResult");
            scope.Start();
            try
            {
                return await RestClient.GetAnalyzeReceiptResultAsync(resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze receipt operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalyzeOperationResult> GetAnalyzeReceiptResult(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeReceiptResult");
            scope.Start();
            try
            {
                return RestClient.GetAnalyzeReceiptResult(resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze layout operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AnalyzeOperationResult>> GetAnalyzeLayoutResultAsync(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeLayoutResult");
            scope.Start();
            try
            {
                return await RestClient.GetAnalyzeLayoutResultAsync(resultId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Track the progress and obtain the result of the analyze layout operation. </summary>
        /// <param name="resultId"> Analyze operation result identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalyzeOperationResult> GetAnalyzeLayoutResult(Guid resultId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetAnalyzeLayoutResult");
            scope.Start();
            try
            {
                return RestClient.GetAnalyzeLayoutResult(resultId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get information about all custom models. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.Models>> GetCustomModelsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetCustomModels");
            scope.Start();
            try
            {
                return await RestClient.GetCustomModelsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get information about all custom models. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.Models> GetCustomModels(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.GetCustomModels");
            scope.Start();
            try
            {
                return RestClient.GetCustomModels(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get information about all custom models. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ModelInfo> ListCustomModelsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ModelInfo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.ListCustomModels");
                scope.Start();
                try
                {
                    var response = await RestClient.ListCustomModelsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.ModelList, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ModelInfo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.ListCustomModels");
                scope.Start();
                try
                {
                    var response = await RestClient.ListCustomModelsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.ModelList, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get information about all custom models. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ModelInfo> ListCustomModels(CancellationToken cancellationToken = default)
        {
            Page<ModelInfo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.ListCustomModels");
                scope.Start();
                try
                {
                    var response = RestClient.ListCustomModels(cancellationToken);
                    return Page.FromValues(response.Value.ModelList, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ModelInfo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.ListCustomModels");
                scope.Start();
                try
                {
                    var response = RestClient.ListCustomModelsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.ModelList, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if &apos;{Mounts:Input}&apos; configuration setting value is &apos;/input&apos; then a valid source path would be &apos;/input/contosodataset&apos;. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Other type of content is ignored. </summary>
        /// <param name="trainRequest"> Training request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="trainRequest"/> is null. </exception>
        public virtual async Task<FormRecognizerTrainCustomModelAsyncOperation> StartTrainCustomModelAsyncAsync(TrainRequest trainRequest, CancellationToken cancellationToken = default)
        {
            if (trainRequest == null)
            {
                throw new ArgumentNullException(nameof(trainRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartTrainCustomModelAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.TrainCustomModelAsyncAsync(trainRequest, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerTrainCustomModelAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateTrainCustomModelAsyncRequest(trainRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if &apos;{Mounts:Input}&apos; configuration setting value is &apos;/input&apos; then a valid source path would be &apos;/input/contosodataset&apos;. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Other type of content is ignored. </summary>
        /// <param name="trainRequest"> Training request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="trainRequest"/> is null. </exception>
        public virtual FormRecognizerTrainCustomModelAsyncOperation StartTrainCustomModelAsync(TrainRequest trainRequest, CancellationToken cancellationToken = default)
        {
            if (trainRequest == null)
            {
                throw new ArgumentNullException(nameof(trainRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartTrainCustomModelAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.TrainCustomModelAsync(trainRequest, cancellationToken);
                return new FormRecognizerTrainCustomModelAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateTrainCustomModelAsyncRequest(trainRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeWithCustomModelOperation> StartAnalyzeWithCustomModelAsync(Guid modelId, Models.ContentType contentType, bool? includeTextDetails = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeWithCustomModel");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeWithCustomModelAsync(modelId, contentType, includeTextDetails, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeWithCustomModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeWithCustomModelRequest(modelId, contentType, includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeWithCustomModelOperation StartAnalyzeWithCustomModel(Guid modelId, Models.ContentType contentType, bool? includeTextDetails = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeWithCustomModel");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeWithCustomModel(modelId, contentType, includeTextDetails, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeWithCustomModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeWithCustomModelRequest(modelId, contentType, includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeWithCustomModelOperation> StartAnalyzeWithCustomModelAsync(Guid modelId, bool? includeTextDetails = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeWithCustomModel");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeWithCustomModelAsync(modelId, includeTextDetails, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeWithCustomModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeWithCustomModelRequest(modelId, includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeWithCustomModelOperation StartAnalyzeWithCustomModel(Guid modelId, bool? includeTextDetails = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeWithCustomModel");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeWithCustomModel(modelId, includeTextDetails, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeWithCustomModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeWithCustomModelRequest(modelId, includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Copy custom model stored in this resource (the source) to user specified target Form Recognizer resource. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="copyRequest"> Copy request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="copyRequest"/> is null. </exception>
        public virtual async Task<FormRecognizerCopyCustomModelOperation> StartCopyCustomModelAsync(Guid modelId, CopyRequest copyRequest, CancellationToken cancellationToken = default)
        {
            if (copyRequest == null)
            {
                throw new ArgumentNullException(nameof(copyRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartCopyCustomModel");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CopyCustomModelAsync(modelId, copyRequest, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerCopyCustomModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateCopyCustomModelRequest(modelId, copyRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Copy custom model stored in this resource (the source) to user specified target Form Recognizer resource. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="copyRequest"> Copy request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="copyRequest"/> is null. </exception>
        public virtual FormRecognizerCopyCustomModelOperation StartCopyCustomModel(Guid modelId, CopyRequest copyRequest, CancellationToken cancellationToken = default)
        {
            if (copyRequest == null)
            {
                throw new ArgumentNullException(nameof(copyRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartCopyCustomModel");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CopyCustomModel(modelId, copyRequest, cancellationToken);
                return new FormRecognizerCopyCustomModelOperation(_clientDiagnostics, _pipeline, RestClient.CreateCopyCustomModelRequest(modelId, copyRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Compose request would include list of models ids.
        /// It would validate what all models either trained with labels model or composed model.
        /// It would validate limit of models put together.
        /// </summary>
        /// <param name="composeRequest"> Compose models. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="composeRequest"/> is null. </exception>
        public virtual async Task<FormRecognizerComposeCustomModelsAsyncOperation> StartComposeCustomModelsAsyncAsync(ComposeRequest composeRequest, CancellationToken cancellationToken = default)
        {
            if (composeRequest == null)
            {
                throw new ArgumentNullException(nameof(composeRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartComposeCustomModelsAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ComposeCustomModelsAsyncAsync(composeRequest, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerComposeCustomModelsAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateComposeCustomModelsAsyncRequest(composeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Compose request would include list of models ids.
        /// It would validate what all models either trained with labels model or composed model.
        /// It would validate limit of models put together.
        /// </summary>
        /// <param name="composeRequest"> Compose models. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="composeRequest"/> is null. </exception>
        public virtual FormRecognizerComposeCustomModelsAsyncOperation StartComposeCustomModelsAsync(ComposeRequest composeRequest, CancellationToken cancellationToken = default)
        {
            if (composeRequest == null)
            {
                throw new ArgumentNullException(nameof(composeRequest));
            }

            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartComposeCustomModelsAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ComposeCustomModelsAsync(composeRequest, cancellationToken);
                return new FormRecognizerComposeCustomModelsAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateComposeCustomModelsAsyncRequest(composeRequest).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given business card document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeBusinessCardAsyncOperation> StartAnalyzeBusinessCardAsyncAsync(Models.ContentType contentType, bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeBusinessCardAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeBusinessCardAsyncAsync(contentType, includeTextDetails, locale, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeBusinessCardAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeBusinessCardAsyncRequest(contentType, includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given business card document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeBusinessCardAsyncOperation StartAnalyzeBusinessCardAsync(Models.ContentType contentType, bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeBusinessCardAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeBusinessCardAsync(contentType, includeTextDetails, locale, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeBusinessCardAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeBusinessCardAsyncRequest(contentType, includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given business card document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeBusinessCardAsyncOperation> StartAnalyzeBusinessCardAsyncAsync(bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeBusinessCardAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeBusinessCardAsyncAsync(includeTextDetails, locale, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeBusinessCardAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeBusinessCardAsyncRequest(includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given business card document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeBusinessCardAsyncOperation StartAnalyzeBusinessCardAsync(bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeBusinessCardAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeBusinessCardAsync(includeTextDetails, locale, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeBusinessCardAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeBusinessCardAsyncRequest(includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given invoice document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeInvoiceAsyncOperation> StartAnalyzeInvoiceAsyncAsync(Models.ContentType contentType, bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeInvoiceAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeInvoiceAsyncAsync(contentType, includeTextDetails, locale, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeInvoiceAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeInvoiceAsyncRequest(contentType, includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given invoice document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeInvoiceAsyncOperation StartAnalyzeInvoiceAsync(Models.ContentType contentType, bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeInvoiceAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeInvoiceAsync(contentType, includeTextDetails, locale, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeInvoiceAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeInvoiceAsyncRequest(contentType, includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given invoice document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeInvoiceAsyncOperation> StartAnalyzeInvoiceAsyncAsync(bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeInvoiceAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeInvoiceAsyncAsync(includeTextDetails, locale, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeInvoiceAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeInvoiceAsyncRequest(includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given invoice document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeInvoiceAsyncOperation StartAnalyzeInvoiceAsync(bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeInvoiceAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeInvoiceAsync(includeTextDetails, locale, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeInvoiceAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeInvoiceAsyncRequest(includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given ID document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeIdDocumentAsyncOperation> StartAnalyzeIdDocumentAsyncAsync(Models.ContentType contentType, bool? includeTextDetails = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeIdDocumentAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeIdDocumentAsyncAsync(contentType, includeTextDetails, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeIdDocumentAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeIdDocumentAsyncRequest(contentType, includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given ID document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeIdDocumentAsyncOperation StartAnalyzeIdDocumentAsync(Models.ContentType contentType, bool? includeTextDetails = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeIdDocumentAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeIdDocumentAsync(contentType, includeTextDetails, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeIdDocumentAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeIdDocumentAsyncRequest(contentType, includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given ID document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeIdDocumentAsyncOperation> StartAnalyzeIdDocumentAsyncAsync(bool? includeTextDetails = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeIdDocumentAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeIdDocumentAsyncAsync(includeTextDetails, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeIdDocumentAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeIdDocumentAsyncRequest(includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given ID document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeIdDocumentAsyncOperation StartAnalyzeIdDocumentAsync(bool? includeTextDetails = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeIdDocumentAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeIdDocumentAsync(includeTextDetails, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeIdDocumentAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeIdDocumentAsyncRequest(includeTextDetails, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeReceiptAsyncOperation> StartAnalyzeReceiptAsyncAsync(Models.ContentType contentType, bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeReceiptAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeReceiptAsyncAsync(contentType, includeTextDetails, locale, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeReceiptAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeReceiptAsyncRequest(contentType, includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeReceiptAsyncOperation StartAnalyzeReceiptAsync(Models.ContentType contentType, bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeReceiptAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeReceiptAsync(contentType, includeTextDetails, locale, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeReceiptAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeReceiptAsyncRequest(contentType, includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeReceiptAsyncOperation> StartAnalyzeReceiptAsyncAsync(bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeReceiptAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeReceiptAsyncAsync(includeTextDetails, locale, pages, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeReceiptAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeReceiptAsyncRequest(includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract field text and semantic values from a given receipt document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri) of the document to be analyzed. </summary>
        /// <param name="includeTextDetails"> Include text lines and element references in the result. </param>
        /// <param name="locale"> Locale of the input document. Supported locales include: en-AU, en-CA, en-GB, en-IN, en-US(default). </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeReceiptAsyncOperation StartAnalyzeReceiptAsync(bool? includeTextDetails = null, Locale? locale = null, IEnumerable<string> pages = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeReceiptAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeReceiptAsync(includeTextDetails, locale, pages, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeReceiptAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeReceiptAsyncRequest(includeTextDetails, locale, pages, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract text and layout information from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="language"> Currently, only Afrikaans (‘af’), Albanian (‘sq’), Asturian (‘ast’), Basque (‘eu’), Bislama (‘bi’), Breton (‘br’), Catalan (‘ca’), Cebuano (‘ceb’), Chamorro (‘ch’), Cornish (‘kw’), Corsican (‘co’), Crimean Tatar - Latin script(‘crh’), Czech (‘cs’), Danish (‘da’), Dutch (‘nl’), English (&apos;en&apos;), Estonian (‘et’), Fijian (‘fj’), Filipino (‘fil’), Finnish (‘fi’), French (‘fr’), Friulian (‘fur’), Galician (‘gl’), German (‘de’), Gilbertese (‘gil’), Greenlandic (‘kl’), Haitian Creole (‘ht’), Hani (‘hni’), Hmong Daw (‘mww’), Hungarian (‘hu’), Indonesian (‘id’), Interlingua (‘ia’), Inuktitut (‘iu’), Irish (‘ga’), Italian (‘it’), Japanese (‘ja’), Javanese (‘jv’), Kabuverdianu (‘kea’), Kachin (‘kac’), Kara-Kalpak (‘kaa’), Kashubian (‘csb’), Khasi (‘kha’), Korean (‘ko’), Kurdish - Latin script (‘ku’), K’iche’ (‘quc’), Luxembourgish (‘lb’), Malay (‘ms’), Manx (‘gv’), Neapolitan (‘nap’), Norwegian (‘no’), Occitan (‘oc’), Polish (‘pl’), Portuguese (‘pt’), Romansh (‘rm’), Scots (‘sco’), Scottish Gaelic (‘gd’), simplified Chinese (‘zh-Hans’), Slovenian (‘sl’), Spanish (‘es’), Swahili (‘sw’), Swedish (‘sv’), Tatar - Latin script (‘tt’), Tetum (‘tet’), traditional Chinese (‘zh-Hant’), Turkish (‘tr’), Upper Sorbian (‘hsb’), Uzbek (‘uz’), Volapük (‘vo’), Walser (‘wae’), Western Frisian (‘fy’), Yucatec Maya (‘yua’), Zhuang (‘za’) and Zulu (‘zu’) are supported (print – seventy-three languages and handwritten – English only). Layout supports auto language identification and multi language documents, so only provide a language code if you would like to force the documented to be processed as that specific language. </param>
        /// <param name="readingOrder"> Reading order algorithm to sort the text lines returned. Supported reading orders include: basic(default), natural. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeLayoutAsyncOperation> StartAnalyzeLayoutAsyncAsync(Models.ContentType contentType, IEnumerable<string> pages = null, Language? language = null, ReadingOrder? readingOrder = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeLayoutAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeLayoutAsyncAsync(contentType, pages, language, readingOrder, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeLayoutAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeLayoutAsyncRequest(contentType, pages, language, readingOrder, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract text and layout information from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="contentType"> Upload file type. </param>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="language"> Currently, only Afrikaans (‘af’), Albanian (‘sq’), Asturian (‘ast’), Basque (‘eu’), Bislama (‘bi’), Breton (‘br’), Catalan (‘ca’), Cebuano (‘ceb’), Chamorro (‘ch’), Cornish (‘kw’), Corsican (‘co’), Crimean Tatar - Latin script(‘crh’), Czech (‘cs’), Danish (‘da’), Dutch (‘nl’), English (&apos;en&apos;), Estonian (‘et’), Fijian (‘fj’), Filipino (‘fil’), Finnish (‘fi’), French (‘fr’), Friulian (‘fur’), Galician (‘gl’), German (‘de’), Gilbertese (‘gil’), Greenlandic (‘kl’), Haitian Creole (‘ht’), Hani (‘hni’), Hmong Daw (‘mww’), Hungarian (‘hu’), Indonesian (‘id’), Interlingua (‘ia’), Inuktitut (‘iu’), Irish (‘ga’), Italian (‘it’), Japanese (‘ja’), Javanese (‘jv’), Kabuverdianu (‘kea’), Kachin (‘kac’), Kara-Kalpak (‘kaa’), Kashubian (‘csb’), Khasi (‘kha’), Korean (‘ko’), Kurdish - Latin script (‘ku’), K’iche’ (‘quc’), Luxembourgish (‘lb’), Malay (‘ms’), Manx (‘gv’), Neapolitan (‘nap’), Norwegian (‘no’), Occitan (‘oc’), Polish (‘pl’), Portuguese (‘pt’), Romansh (‘rm’), Scots (‘sco’), Scottish Gaelic (‘gd’), simplified Chinese (‘zh-Hans’), Slovenian (‘sl’), Spanish (‘es’), Swahili (‘sw’), Swedish (‘sv’), Tatar - Latin script (‘tt’), Tetum (‘tet’), traditional Chinese (‘zh-Hant’), Turkish (‘tr’), Upper Sorbian (‘hsb’), Uzbek (‘uz’), Volapük (‘vo’), Walser (‘wae’), Western Frisian (‘fy’), Yucatec Maya (‘yua’), Zhuang (‘za’) and Zulu (‘zu’) are supported (print – seventy-three languages and handwritten – English only). Layout supports auto language identification and multi language documents, so only provide a language code if you would like to force the documented to be processed as that specific language. </param>
        /// <param name="readingOrder"> Reading order algorithm to sort the text lines returned. Supported reading orders include: basic(default), natural. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeLayoutAsyncOperation StartAnalyzeLayoutAsync(Models.ContentType contentType, IEnumerable<string> pages = null, Language? language = null, ReadingOrder? readingOrder = null, Stream fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeLayoutAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeLayoutAsync(contentType, pages, language, readingOrder, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeLayoutAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeLayoutAsyncRequest(contentType, pages, language, readingOrder, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract text and layout information from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="language"> Currently, only Afrikaans (‘af’), Albanian (‘sq’), Asturian (‘ast’), Basque (‘eu’), Bislama (‘bi’), Breton (‘br’), Catalan (‘ca’), Cebuano (‘ceb’), Chamorro (‘ch’), Cornish (‘kw’), Corsican (‘co’), Crimean Tatar - Latin script(‘crh’), Czech (‘cs’), Danish (‘da’), Dutch (‘nl’), English (&apos;en&apos;), Estonian (‘et’), Fijian (‘fj’), Filipino (‘fil’), Finnish (‘fi’), French (‘fr’), Friulian (‘fur’), Galician (‘gl’), German (‘de’), Gilbertese (‘gil’), Greenlandic (‘kl’), Haitian Creole (‘ht’), Hani (‘hni’), Hmong Daw (‘mww’), Hungarian (‘hu’), Indonesian (‘id’), Interlingua (‘ia’), Inuktitut (‘iu’), Irish (‘ga’), Italian (‘it’), Japanese (‘ja’), Javanese (‘jv’), Kabuverdianu (‘kea’), Kachin (‘kac’), Kara-Kalpak (‘kaa’), Kashubian (‘csb’), Khasi (‘kha’), Korean (‘ko’), Kurdish - Latin script (‘ku’), K’iche’ (‘quc’), Luxembourgish (‘lb’), Malay (‘ms’), Manx (‘gv’), Neapolitan (‘nap’), Norwegian (‘no’), Occitan (‘oc’), Polish (‘pl’), Portuguese (‘pt’), Romansh (‘rm’), Scots (‘sco’), Scottish Gaelic (‘gd’), simplified Chinese (‘zh-Hans’), Slovenian (‘sl’), Spanish (‘es’), Swahili (‘sw’), Swedish (‘sv’), Tatar - Latin script (‘tt’), Tetum (‘tet’), traditional Chinese (‘zh-Hant’), Turkish (‘tr’), Upper Sorbian (‘hsb’), Uzbek (‘uz’), Volapük (‘vo’), Walser (‘wae’), Western Frisian (‘fy’), Yucatec Maya (‘yua’), Zhuang (‘za’) and Zulu (‘zu’) are supported (print – seventy-three languages and handwritten – English only). Layout supports auto language identification and multi language documents, so only provide a language code if you would like to force the documented to be processed as that specific language. </param>
        /// <param name="readingOrder"> Reading order algorithm to sort the text lines returned. Supported reading orders include: basic(default), natural. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<FormRecognizerAnalyzeLayoutAsyncOperation> StartAnalyzeLayoutAsyncAsync(IEnumerable<string> pages = null, Language? language = null, ReadingOrder? readingOrder = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeLayoutAsync");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.AnalyzeLayoutAsyncAsync(pages, language, readingOrder, fileStream, cancellationToken).ConfigureAwait(false);
                return new FormRecognizerAnalyzeLayoutAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeLayoutAsyncRequest(pages, language, readingOrder, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Extract text and layout information from a given document. The input document must be of one of the supported content types - &apos;application/pdf&apos;, &apos;image/jpeg&apos;, &apos;image/png&apos;, &apos;image/tiff&apos; or &apos;image/bmp&apos;. Alternatively, use &apos;application/json&apos; type to specify the location (Uri or local path) of the document to be analyzed. </summary>
        /// <param name="pages"> Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma. </param>
        /// <param name="language"> Currently, only Afrikaans (‘af’), Albanian (‘sq’), Asturian (‘ast’), Basque (‘eu’), Bislama (‘bi’), Breton (‘br’), Catalan (‘ca’), Cebuano (‘ceb’), Chamorro (‘ch’), Cornish (‘kw’), Corsican (‘co’), Crimean Tatar - Latin script(‘crh’), Czech (‘cs’), Danish (‘da’), Dutch (‘nl’), English (&apos;en&apos;), Estonian (‘et’), Fijian (‘fj’), Filipino (‘fil’), Finnish (‘fi’), French (‘fr’), Friulian (‘fur’), Galician (‘gl’), German (‘de’), Gilbertese (‘gil’), Greenlandic (‘kl’), Haitian Creole (‘ht’), Hani (‘hni’), Hmong Daw (‘mww’), Hungarian (‘hu’), Indonesian (‘id’), Interlingua (‘ia’), Inuktitut (‘iu’), Irish (‘ga’), Italian (‘it’), Japanese (‘ja’), Javanese (‘jv’), Kabuverdianu (‘kea’), Kachin (‘kac’), Kara-Kalpak (‘kaa’), Kashubian (‘csb’), Khasi (‘kha’), Korean (‘ko’), Kurdish - Latin script (‘ku’), K’iche’ (‘quc’), Luxembourgish (‘lb’), Malay (‘ms’), Manx (‘gv’), Neapolitan (‘nap’), Norwegian (‘no’), Occitan (‘oc’), Polish (‘pl’), Portuguese (‘pt’), Romansh (‘rm’), Scots (‘sco’), Scottish Gaelic (‘gd’), simplified Chinese (‘zh-Hans’), Slovenian (‘sl’), Spanish (‘es’), Swahili (‘sw’), Swedish (‘sv’), Tatar - Latin script (‘tt’), Tetum (‘tet’), traditional Chinese (‘zh-Hant’), Turkish (‘tr’), Upper Sorbian (‘hsb’), Uzbek (‘uz’), Volapük (‘vo’), Walser (‘wae’), Western Frisian (‘fy’), Yucatec Maya (‘yua’), Zhuang (‘za’) and Zulu (‘zu’) are supported (print – seventy-three languages and handwritten – English only). Layout supports auto language identification and multi language documents, so only provide a language code if you would like to force the documented to be processed as that specific language. </param>
        /// <param name="readingOrder"> Reading order algorithm to sort the text lines returned. Supported reading orders include: basic(default), natural. </param>
        /// <param name="fileStream"> .json, .pdf, .jpg, .png, .tiff or .bmp type file stream. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual FormRecognizerAnalyzeLayoutAsyncOperation StartAnalyzeLayoutAsync(IEnumerable<string> pages = null, Language? language = null, ReadingOrder? readingOrder = null, SourcePath fileStream = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FormRecognizerClient.StartAnalyzeLayoutAsync");
            scope.Start();
            try
            {
                var originalResponse = RestClient.AnalyzeLayoutAsync(pages, language, readingOrder, fileStream, cancellationToken);
                return new FormRecognizerAnalyzeLayoutAsyncOperation(_clientDiagnostics, _pipeline, RestClient.CreateAnalyzeLayoutAsyncRequest(pages, language, readingOrder, fileStream).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
