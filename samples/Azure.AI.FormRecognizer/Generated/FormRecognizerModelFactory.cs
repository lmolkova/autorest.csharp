// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.FormRecognizer.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class FormRecognizerModelFactory
    {
        /// <summary> Initializes a new instance of ErrorInformation. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="FormRecognizer.Models.ErrorInformation"/> instance for mocking. </returns>
        public static ErrorInformation ErrorInformation(string code = null, string message = null)
        {
            return new ErrorInformation(code, message);
        }

        /// <summary> Initializes a new instance of Model. </summary>
        /// <param name="modelInfo"> Basic custom model information. </param>
        /// <param name="keys"> Keys extracted by the custom model. </param>
        /// <param name="trainResult"> Training result for custom model. </param>
        /// <param name="composedTrainResults"> Training result for composed model. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.Model"/> instance for mocking. </returns>
        public static Model Model(ModelInfo modelInfo = null, KeysResult keys = null, TrainResult trainResult = null, IEnumerable<TrainResult> composedTrainResults = null)
        {
            composedTrainResults ??= new List<TrainResult>();

            return new Model(modelInfo, keys, trainResult, composedTrainResults?.ToList());
        }

        /// <summary> Initializes a new instance of ModelInfo. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="status"> Status of the model. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the model was created. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="modelName"> Optional user defined model name (max length: 1024). </param>
        /// <param name="attributes"> Optional model attributes. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.ModelInfo"/> instance for mocking. </returns>
        public static ModelInfo ModelInfo(Guid modelId = default, ModelStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, string modelName = null, Attributes attributes = null)
        {
            return new ModelInfo(modelId, status, createdDateTime, lastUpdatedDateTime, modelName, attributes);
        }

        /// <summary> Initializes a new instance of Attributes. </summary>
        /// <param name="isComposed"> Is this model composed? (default: false). </param>
        /// <returns> A new <see cref="FormRecognizer.Models.Attributes"/> instance for mocking. </returns>
        public static Attributes Attributes(bool? isComposed = null)
        {
            return new Attributes(isComposed);
        }

        /// <summary> Initializes a new instance of KeysResult. </summary>
        /// <param name="clusters"> Object mapping clusterIds to a list of keys. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.KeysResult"/> instance for mocking. </returns>
        public static KeysResult KeysResult(IReadOnlyDictionary<string, IList<string>> clusters = null)
        {
            clusters ??= new Dictionary<string, IList<string>>();

            return new KeysResult(clusters);
        }

        /// <summary> Initializes a new instance of TrainResult. </summary>
        /// <param name="trainingDocuments"> List of the documents used to train the model and any errors reported in each document. </param>
        /// <param name="fields"> List of fields used to train the model and the train operation error reported by each. </param>
        /// <param name="averageModelAccuracy"> Average accuracy. </param>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="errors"> Errors returned during the training operation. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.TrainResult"/> instance for mocking. </returns>
        public static TrainResult TrainResult(IEnumerable<TrainingDocumentInfo> trainingDocuments = null, IEnumerable<FormFieldsReport> fields = null, float? averageModelAccuracy = null, Guid? modelId = null, IEnumerable<ErrorInformation> errors = null)
        {
            trainingDocuments ??= new List<TrainingDocumentInfo>();
            fields ??= new List<FormFieldsReport>();
            errors ??= new List<ErrorInformation>();

            return new TrainResult(trainingDocuments?.ToList(), fields?.ToList(), averageModelAccuracy, modelId, errors?.ToList());
        }

        /// <summary> Initializes a new instance of TrainingDocumentInfo. </summary>
        /// <param name="documentName"> Training document name. </param>
        /// <param name="pages"> Total number of pages trained. </param>
        /// <param name="errors"> List of errors. </param>
        /// <param name="status"> Status of the training operation. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.TrainingDocumentInfo"/> instance for mocking. </returns>
        public static TrainingDocumentInfo TrainingDocumentInfo(string documentName = null, int pages = default, IEnumerable<ErrorInformation> errors = null, TrainStatus status = default)
        {
            errors ??= new List<ErrorInformation>();

            return new TrainingDocumentInfo(documentName, pages, errors?.ToList(), status);
        }

        /// <summary> Initializes a new instance of FormFieldsReport. </summary>
        /// <param name="fieldName"> Training field name. </param>
        /// <param name="accuracy"> Estimated extraction accuracy for this field. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.FormFieldsReport"/> instance for mocking. </returns>
        public static FormFieldsReport FormFieldsReport(string fieldName = null, float accuracy = default)
        {
            return new FormFieldsReport(fieldName, accuracy);
        }

        /// <summary> Initializes a new instance of AnalyzeOperationResult. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the analyze operation was submitted. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="analyzeResult"> Results of the analyze operation. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.AnalyzeOperationResult"/> instance for mocking. </returns>
        public static AnalyzeOperationResult AnalyzeOperationResult(OperationStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, V2AnalyzeResult analyzeResult = null)
        {
            return new AnalyzeOperationResult(status, createdDateTime, lastUpdatedDateTime, analyzeResult);
        }

        /// <summary> Initializes a new instance of V2AnalyzeResult. </summary>
        /// <param name="version"> Version of schema used for this result. </param>
        /// <param name="readResults"> Text extracted from the input. </param>
        /// <param name="pageResults"> Page-level information extracted from the input. </param>
        /// <param name="documentResults"> Document-level information extracted from the input. </param>
        /// <param name="errors"> List of errors reported during the analyze operation. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.V2AnalyzeResult"/> instance for mocking. </returns>
        public static V2AnalyzeResult V2AnalyzeResult(string version = null, IEnumerable<ReadResult> readResults = null, IEnumerable<PageResult> pageResults = null, IEnumerable<DocumentResult> documentResults = null, IEnumerable<ErrorInformation> errors = null)
        {
            readResults ??= new List<ReadResult>();
            pageResults ??= new List<PageResult>();
            documentResults ??= new List<DocumentResult>();
            errors ??= new List<ErrorInformation>();

            return new V2AnalyzeResult(version, readResults?.ToList(), pageResults?.ToList(), documentResults?.ToList(), errors?.ToList());
        }

        /// <summary> Initializes a new instance of ReadResult. </summary>
        /// <param name="page"> The 1-based page number in the input document. </param>
        /// <param name="angle"> The general orientation of the text in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="unit"> The unit used by the width, height and boundingBox properties. For images, the unit is &quot;pixel&quot;. For PDF, the unit is &quot;inch&quot;. </param>
        /// <param name="lines"> When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order. </param>
        /// <param name="selectionMarks"> List of selection marks extracted from the page. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.ReadResult"/> instance for mocking. </returns>
        public static ReadResult ReadResult(int page = default, float angle = default, float width = default, float height = default, LengthUnit unit = default, IEnumerable<TextLine> lines = null, IEnumerable<SelectionMark> selectionMarks = null)
        {
            lines ??= new List<TextLine>();
            selectionMarks ??= new List<SelectionMark>();

            return new ReadResult(page, angle, width, height, unit, lines?.ToList(), selectionMarks?.ToList());
        }

        /// <summary> Initializes a new instance of TextLine. </summary>
        /// <param name="text"> The text content of the line. </param>
        /// <param name="boundingBox"> Bounding box of an extracted line. </param>
        /// <param name="words"> List of words in the text line. </param>
        /// <param name="appearance"> Text appearance properties. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.TextLine"/> instance for mocking. </returns>
        public static TextLine TextLine(string text = null, IEnumerable<float> boundingBox = null, IEnumerable<TextWord> words = null, Appearance appearance = null)
        {
            boundingBox ??= new List<float>();
            words ??= new List<TextWord>();

            return new TextLine(text, boundingBox?.ToList(), words?.ToList(), appearance);
        }

        /// <summary> Initializes a new instance of TextWord. </summary>
        /// <param name="text"> The text content of the word. </param>
        /// <param name="boundingBox"> Bounding box of an extracted word. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.TextWord"/> instance for mocking. </returns>
        public static TextWord TextWord(string text = null, IEnumerable<float> boundingBox = null, float? confidence = null)
        {
            boundingBox ??= new List<float>();

            return new TextWord(text, boundingBox?.ToList(), confidence);
        }

        /// <summary> Initializes a new instance of Appearance. </summary>
        /// <param name="style"> An object representing the style of the text line. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.Appearance"/> instance for mocking. </returns>
        public static Appearance Appearance(Style style = null)
        {
            return new Appearance(style);
        }

        /// <summary> Initializes a new instance of Style. </summary>
        /// <param name="name"> The text line style name, including handwriting and other. </param>
        /// <param name="confidence"> The confidence of text line style. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.Style"/> instance for mocking. </returns>
        public static Style Style(TextStyle name = default, float confidence = default)
        {
            return new Style(name, confidence);
        }

        /// <summary> Initializes a new instance of SelectionMark. </summary>
        /// <param name="boundingBox"> Bounding box of the selection mark. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <param name="state"> State of the selection mark. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.SelectionMark"/> instance for mocking. </returns>
        public static SelectionMark SelectionMark(IEnumerable<float> boundingBox = null, float confidence = default, SelectionMarkState state = default)
        {
            boundingBox ??= new List<float>();

            return new SelectionMark(boundingBox?.ToList(), confidence, state);
        }

        /// <summary> Initializes a new instance of PageResult. </summary>
        /// <param name="page"> Page number. </param>
        /// <param name="clusterId"> Cluster identifier. </param>
        /// <param name="keyValuePairs"> List of key-value pairs extracted from the page. </param>
        /// <param name="tables"> List of data tables extracted from the page. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.PageResult"/> instance for mocking. </returns>
        public static PageResult PageResult(int page = default, int? clusterId = null, IEnumerable<KeyValuePair> keyValuePairs = null, IEnumerable<DataTable> tables = null)
        {
            keyValuePairs ??= new List<KeyValuePair>();
            tables ??= new List<DataTable>();

            return new PageResult(page, clusterId, keyValuePairs?.ToList(), tables?.ToList());
        }

        /// <summary> Initializes a new instance of KeyValuePair. </summary>
        /// <param name="label"> A user defined label for the key/value pair entry. </param>
        /// <param name="key"> Information about the extracted key in a key-value pair. </param>
        /// <param name="value"> Information about the extracted value in a key-value pair. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.KeyValuePair"/> instance for mocking. </returns>
        public static KeyValuePair KeyValuePair(string label = null, KeyValueElement key = null, KeyValueElement value = null, float confidence = default)
        {
            return new KeyValuePair(label, key, value, confidence);
        }

        /// <summary> Initializes a new instance of KeyValueElement. </summary>
        /// <param name="type"> Semantic data type of the key value element. </param>
        /// <param name="text"> The text content of the key or value. </param>
        /// <param name="boundingBox"> Bounding box of the key or value. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this key or value. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.KeyValueElement"/> instance for mocking. </returns>
        public static KeyValueElement KeyValueElement(KeyValueType? type = null, string text = null, IEnumerable<float> boundingBox = null, IEnumerable<string> elements = null)
        {
            boundingBox ??= new List<float>();
            elements ??= new List<string>();

            return new KeyValueElement(type, text, boundingBox?.ToList(), elements?.ToList());
        }

        /// <summary> Initializes a new instance of DataTable. </summary>
        /// <param name="rows"> Number of rows. </param>
        /// <param name="columns"> Number of columns. </param>
        /// <param name="cells"> List of cells contained in the table. </param>
        /// <param name="boundingBox"> Bounding box of the table. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DataTable"/> instance for mocking. </returns>
        public static DataTable DataTable(int rows = default, int columns = default, IEnumerable<DataTableCell> cells = null, IEnumerable<float> boundingBox = null)
        {
            cells ??= new List<DataTableCell>();
            boundingBox ??= new List<float>();

            return new DataTable(rows, columns, cells?.ToList(), boundingBox?.ToList());
        }

        /// <summary> Initializes a new instance of DataTableCell. </summary>
        /// <param name="rowIndex"> Row index of the cell. </param>
        /// <param name="columnIndex"> Column index of the cell. </param>
        /// <param name="rowSpan"> Number of rows spanned by this cell. </param>
        /// <param name="columnSpan"> Number of columns spanned by this cell. </param>
        /// <param name="text"> Text content of the cell. </param>
        /// <param name="boundingBox"> Bounding box of the cell. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this table cell. </param>
        /// <param name="isHeader"> Is the current cell a header cell?. </param>
        /// <param name="isFooter"> Is the current cell a footer cell?. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DataTableCell"/> instance for mocking. </returns>
        public static DataTableCell DataTableCell(int rowIndex = default, int columnIndex = default, int? rowSpan = null, int? columnSpan = null, string text = null, IEnumerable<float> boundingBox = null, float confidence = default, IEnumerable<string> elements = null, bool? isHeader = null, bool? isFooter = null)
        {
            boundingBox ??= new List<float>();
            elements ??= new List<string>();

            return new DataTableCell(rowIndex, columnIndex, rowSpan, columnSpan, text, boundingBox?.ToList(), confidence, elements?.ToList(), isHeader, isFooter);
        }

        /// <summary> Initializes a new instance of DocumentResult. </summary>
        /// <param name="docType"> Document type. </param>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="pageRange"> First and last page number where the document is found. </param>
        /// <param name="docTypeConfidence"> Predicted document type confidence. </param>
        /// <param name="fields"> Dictionary of named field values. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentResult"/> instance for mocking. </returns>
        public static DocumentResult DocumentResult(string docType = null, Guid? modelId = null, IEnumerable<int> pageRange = null, float? docTypeConfidence = null, IReadOnlyDictionary<string, FieldValue> fields = null)
        {
            pageRange ??= new List<int>();
            fields ??= new Dictionary<string, FieldValue>();

            return new DocumentResult(docType, modelId, pageRange?.ToList(), docTypeConfidence, fields);
        }

        /// <summary> Initializes a new instance of FieldValue. </summary>
        /// <param name="type"> Type of field value. </param>
        /// <param name="valueString"> String value. </param>
        /// <param name="valueDate"> Date value. </param>
        /// <param name="valueTime"> Time value. </param>
        /// <param name="valuePhoneNumber"> Phone number value. </param>
        /// <param name="valueNumber"> Floating point value. </param>
        /// <param name="valueInteger"> Integer value. </param>
        /// <param name="valueArray"> Array of field values. </param>
        /// <param name="valueObject"> Dictionary of named field values. </param>
        /// <param name="valueSelectionMark"> Selection mark value. </param>
        /// <param name="valueCountryRegion"> 3-letter country code (ISO 3166-1 alpha-3). </param>
        /// <param name="text"> Text content of the extracted field. </param>
        /// <param name="boundingBox"> Bounding box of the field value, if appropriate. </param>
        /// <param name="confidence"> Confidence score. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this field. </param>
        /// <param name="page"> The 1-based page number in the input document. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.FieldValue"/> instance for mocking. </returns>
        public static FieldValue FieldValue(FieldValueType type = default, string valueString = null, DateTimeOffset? valueDate = null, TimeSpan? valueTime = null, string valuePhoneNumber = null, float? valueNumber = null, int? valueInteger = null, IEnumerable<FieldValue> valueArray = null, IReadOnlyDictionary<string, FieldValue> valueObject = null, FieldValueSelectionMark? valueSelectionMark = null, string valueCountryRegion = null, string text = null, IEnumerable<float> boundingBox = null, float? confidence = null, IEnumerable<string> elements = null, int? page = null)
        {
            valueArray ??= new List<FieldValue>();
            valueObject ??= new Dictionary<string, FieldValue>();
            boundingBox ??= new List<float>();
            elements ??= new List<string>();

            return new FieldValue(type, valueString, valueDate, valueTime, valuePhoneNumber, valueNumber, valueInteger, valueArray?.ToList(), valueObject, valueSelectionMark, valueCountryRegion, text, boundingBox?.ToList(), confidence, elements?.ToList(), page);
        }

        /// <summary> Initializes a new instance of CopyOperationResult. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the copy operation was submitted. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="copyResult"> Results of the copy operation. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.CopyOperationResult"/> instance for mocking. </returns>
        public static CopyOperationResult CopyOperationResult(OperationStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, CopyResult copyResult = null)
        {
            return new CopyOperationResult(status, createdDateTime, lastUpdatedDateTime, copyResult);
        }

        /// <summary> Initializes a new instance of CopyResult. </summary>
        /// <param name="modelId"> Identifier of the target model. </param>
        /// <param name="errors"> Errors returned during the copy operation. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.CopyResult"/> instance for mocking. </returns>
        public static CopyResult CopyResult(Guid modelId = default, IEnumerable<ErrorInformation> errors = null)
        {
            errors ??= new List<ErrorInformation>();

            return new CopyResult(modelId, errors?.ToList());
        }

        /// <summary> Initializes a new instance of Models. </summary>
        /// <param name="summary"> Summary of all trained custom models. </param>
        /// <param name="modelList"> Collection of trained custom models. </param>
        /// <param name="nextLink"> Link to the next page of custom models. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.Models"/> instance for mocking. </returns>
        public static Models Models(ModelsSummary summary = null, IEnumerable<ModelInfo> modelList = null, string nextLink = null)
        {
            modelList ??= new List<ModelInfo>();

            return new Models(summary, modelList?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of ModelsSummary. </summary>
        /// <param name="count"> Current count of trained custom models. </param>
        /// <param name="limit"> Max number of models that can be trained for this account. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the summary was last updated. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.ModelsSummary"/> instance for mocking. </returns>
        public static ModelsSummary ModelsSummary(int count = default, int limit = default, DateTimeOffset lastUpdatedDateTime = default)
        {
            return new ModelsSummary(count, limit, lastUpdatedDateTime);
        }

        /// <summary> Initializes a new instance of Error. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Target of the error. </param>
        /// <param name="details"> List of detailed errors. </param>
        /// <param name="innererror"> Detailed error. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.Error"/> instance for mocking. </returns>
        public static Error Error(string code = null, string message = null, string target = null, IEnumerable<Error> details = null, InnerError innererror = null)
        {
            details ??= new List<Error>();

            return new Error(code, message, target, details?.ToList(), innererror);
        }

        /// <summary> Initializes a new instance of InnerError. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="innererror"> Detailed error. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.InnerError"/> instance for mocking. </returns>
        public static InnerError InnerError(string code = null, string message = null, InnerError innererror = null)
        {
            return new InnerError(code, message, innererror);
        }

        /// <summary> Initializes a new instance of AnalyzeResultOperation. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the analyze operation was submitted. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="error"> Encountered error during document analysis. </param>
        /// <param name="analyzeResult"> Document analysis result. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.AnalyzeResultOperation"/> instance for mocking. </returns>
        public static AnalyzeResultOperation AnalyzeResultOperation(AnalyzeResultOperationStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, Error error = null, AnalyzeResult analyzeResult = null)
        {
            return new AnalyzeResultOperation(status, createdDateTime, lastUpdatedDateTime, error, analyzeResult);
        }

        /// <summary> Initializes a new instance of AnalyzeResult. </summary>
        /// <param name="apiVersion"> API version used to produce this result. </param>
        /// <param name="modelId"> Model ID used to produce this result. </param>
        /// <param name="stringIndexType"> Method used to compute string offset and length. </param>
        /// <param name="content"> Concatenate string representation of all textual and visual elements in reading order. </param>
        /// <param name="pages"> Analyzed pages. </param>
        /// <param name="tables"> Extracted tables. </param>
        /// <param name="keyValuePairs"> Extracted key-value pairs. </param>
        /// <param name="entities"> Extracted entities. </param>
        /// <param name="styles"> Extracted font styles. </param>
        /// <param name="documents"> Extracted documents. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.AnalyzeResult"/> instance for mocking. </returns>
        public static AnalyzeResult AnalyzeResult(ApiVersion apiVersion = default, string modelId = null, StringIndexType stringIndexType = default, string content = null, IEnumerable<DocumentPage> pages = null, IEnumerable<DocumentTable> tables = null, IEnumerable<DocumentKeyValuePair> keyValuePairs = null, IEnumerable<DocumentEntity> entities = null, IEnumerable<DocumentStyle> styles = null, IEnumerable<Document> documents = null)
        {
            pages ??= new List<DocumentPage>();
            tables ??= new List<DocumentTable>();
            keyValuePairs ??= new List<DocumentKeyValuePair>();
            entities ??= new List<DocumentEntity>();
            styles ??= new List<DocumentStyle>();
            documents ??= new List<Document>();

            return new AnalyzeResult(apiVersion, modelId, stringIndexType, content, pages?.ToList(), tables?.ToList(), keyValuePairs?.ToList(), entities?.ToList(), styles?.ToList(), documents?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentPage. </summary>
        /// <param name="pageNumber"> 1-based page number in the input document. </param>
        /// <param name="angle"> The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="unit"> The unit used by the width, height, and boundingBox properties. For images, the unit is &quot;pixel&quot;. For PDF, the unit is &quot;inch&quot;. </param>
        /// <param name="spans"> Location of the page in the reading order concatenated content. </param>
        /// <param name="words"> Extracted words from the page. </param>
        /// <param name="selectionMarks"> Extracted selection marks from the page. </param>
        /// <param name="lines"> Extracted lines from the page, potentially containing both textual and visual elements. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentPage"/> instance for mocking. </returns>
        public static DocumentPage DocumentPage(int pageNumber = default, float angle = default, float width = default, float height = default, LengthUnit unit = default, IEnumerable<DocumentSpan> spans = null, IEnumerable<DocumentWord> words = null, IEnumerable<DocumentSelectionMark> selectionMarks = null, IEnumerable<DocumentLine> lines = null)
        {
            spans ??= new List<DocumentSpan>();
            words ??= new List<DocumentWord>();
            selectionMarks ??= new List<DocumentSelectionMark>();
            lines ??= new List<DocumentLine>();

            return new DocumentPage(pageNumber, angle, width, height, unit, spans?.ToList(), words?.ToList(), selectionMarks?.ToList(), lines?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentSpan. </summary>
        /// <param name="offset"> Zero-based index of the content represented by the span. </param>
        /// <param name="length"> Number of characters in the content represented by the span. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentSpan"/> instance for mocking. </returns>
        public static DocumentSpan DocumentSpan(int offset = default, int length = default)
        {
            return new DocumentSpan(offset, length);
        }

        /// <summary> Initializes a new instance of DocumentWord. </summary>
        /// <param name="content"> Text content of the word. </param>
        /// <param name="boundingBox"> Bounding box of the word. </param>
        /// <param name="span"> Location of the word in the reading order concatenated content. </param>
        /// <param name="confidence"> Confidence of correctly extracting the word. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentWord"/> instance for mocking. </returns>
        public static DocumentWord DocumentWord(string content = null, IEnumerable<float> boundingBox = null, DocumentSpan span = null, float confidence = default)
        {
            boundingBox ??= new List<float>();

            return new DocumentWord(content, boundingBox?.ToList(), span, confidence);
        }

        /// <summary> Initializes a new instance of DocumentSelectionMark. </summary>
        /// <param name="state"> State of the selection mark. </param>
        /// <param name="boundingBox"> Bounding box of the selection mark. </param>
        /// <param name="span"> Location of the selection mark in the reading order concatenated content. </param>
        /// <param name="confidence"> Confidence of correctly extracting the selection mark. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentSelectionMark"/> instance for mocking. </returns>
        public static DocumentSelectionMark DocumentSelectionMark(SelectionMarkState state = default, IEnumerable<float> boundingBox = null, DocumentSpan span = null, float confidence = default)
        {
            boundingBox ??= new List<float>();

            return new DocumentSelectionMark(state, boundingBox?.ToList(), span, confidence);
        }

        /// <summary> Initializes a new instance of DocumentLine. </summary>
        /// <param name="content"> Concatenated content of the contained elements in reading order. </param>
        /// <param name="boundingBox"> Bounding box of the line. </param>
        /// <param name="spans"> Location of the line in the reading order concatenated content. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentLine"/> instance for mocking. </returns>
        public static DocumentLine DocumentLine(string content = null, IEnumerable<float> boundingBox = null, IEnumerable<DocumentSpan> spans = null)
        {
            boundingBox ??= new List<float>();
            spans ??= new List<DocumentSpan>();

            return new DocumentLine(content, boundingBox?.ToList(), spans?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentTable. </summary>
        /// <param name="rowCount"> Number of rows in the table. </param>
        /// <param name="columnCount"> Number of columns in the table. </param>
        /// <param name="cells"> Cells contained within the table. </param>
        /// <param name="boundingRegions"> Bounding regions covering the table. </param>
        /// <param name="spans"> Location of the table in the reading order concatenated content. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentTable"/> instance for mocking. </returns>
        public static DocumentTable DocumentTable(int rowCount = default, int columnCount = default, IEnumerable<DocumentTableCell> cells = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null)
        {
            cells ??= new List<DocumentTableCell>();
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentTable(rowCount, columnCount, cells?.ToList(), boundingRegions?.ToList(), spans?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentTableCell. </summary>
        /// <param name="kind"> Table cell kind. </param>
        /// <param name="rowIndex"> Row index of the cell. </param>
        /// <param name="columnIndex"> Column index of the cell. </param>
        /// <param name="rowSpan"> Number of rows spanned by this cell. </param>
        /// <param name="columnSpan"> Number of columns spanned by this cell. </param>
        /// <param name="content"> Concatenated content of the table cell in reading order. </param>
        /// <param name="boundingRegions"> Bounding regions covering the table cell. </param>
        /// <param name="spans"> Location of the table cell in the reading order concatenated content. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentTableCell"/> instance for mocking. </returns>
        public static DocumentTableCell DocumentTableCell(DocumentTableCellKind? kind = null, int rowIndex = default, int columnIndex = default, int? rowSpan = null, int? columnSpan = null, string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentTableCell(kind, rowIndex, columnIndex, rowSpan, columnSpan, content, boundingRegions?.ToList(), spans?.ToList());
        }

        /// <summary> Initializes a new instance of BoundingRegion. </summary>
        /// <param name="pageNumber"> 1-based page number of page containing the bounding region. </param>
        /// <param name="boundingBox"> Bounding box on the page, or the entire page if not specified. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.BoundingRegion"/> instance for mocking. </returns>
        public static BoundingRegion BoundingRegion(int pageNumber = default, IEnumerable<float> boundingBox = null)
        {
            boundingBox ??= new List<float>();

            return new BoundingRegion(pageNumber, boundingBox?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentKeyValuePair. </summary>
        /// <param name="key"> Field label of the key-value pair. </param>
        /// <param name="value"> Field value of the key-value pair. </param>
        /// <param name="confidence"> Confidence of correctly extracting the key-value pair. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentKeyValuePair"/> instance for mocking. </returns>
        public static DocumentKeyValuePair DocumentKeyValuePair(DocumentKeyValueElement key = null, DocumentKeyValueElement value = null, float confidence = default)
        {
            return new DocumentKeyValuePair(key, value, confidence);
        }

        /// <summary> Initializes a new instance of DocumentKeyValueElement. </summary>
        /// <param name="content"> Concatenated content of the key-value element in reading order. </param>
        /// <param name="boundingRegions"> Bounding regions covering the key-value element. </param>
        /// <param name="spans"> Location of the key-value element in the reading order concatenated content. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentKeyValueElement"/> instance for mocking. </returns>
        public static DocumentKeyValueElement DocumentKeyValueElement(string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentKeyValueElement(content, boundingRegions?.ToList(), spans?.ToList());
        }

        /// <summary> Initializes a new instance of DocumentEntity. </summary>
        /// <param name="category"> Entity type. </param>
        /// <param name="subCategory"> Entity sub type. </param>
        /// <param name="content"> Entity content. </param>
        /// <param name="boundingRegions"> Bounding regions covering the entity. </param>
        /// <param name="spans"> Location of the entity in the reading order concatenated content. </param>
        /// <param name="confidence"> Confidence of correctly extracting the entity. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentEntity"/> instance for mocking. </returns>
        public static DocumentEntity DocumentEntity(string category = null, string subCategory = null, string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, float confidence = default)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentEntity(category, subCategory, content, boundingRegions?.ToList(), spans?.ToList(), confidence);
        }

        /// <summary> Initializes a new instance of DocumentStyle. </summary>
        /// <param name="isHandwritten"> Is content handwritten?. </param>
        /// <param name="spans"> Location of the text elements in the concatenated content the style applies to. </param>
        /// <param name="confidence"> Confidence of correctly identifying the style. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentStyle"/> instance for mocking. </returns>
        public static DocumentStyle DocumentStyle(bool? isHandwritten = null, IEnumerable<DocumentSpan> spans = null, float confidence = default)
        {
            spans ??= new List<DocumentSpan>();

            return new DocumentStyle(isHandwritten, spans?.ToList(), confidence);
        }

        /// <summary> Initializes a new instance of Document. </summary>
        /// <param name="docType"> Document type. </param>
        /// <param name="boundingRegions"> Bounding regions covering the document. </param>
        /// <param name="spans"> Location of the document in the reading order concatenated content. </param>
        /// <param name="fields"> Dictionary of named field values. </param>
        /// <param name="confidence"> Confidence of correctly extracting the document. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.Document"/> instance for mocking. </returns>
        public static Document Document(string docType = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, IReadOnlyDictionary<string, DocumentField> fields = null, float confidence = default)
        {
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();
            fields ??= new Dictionary<string, DocumentField>();

            return new Document(docType, boundingRegions?.ToList(), spans?.ToList(), fields, confidence);
        }

        /// <summary> Initializes a new instance of DocumentField. </summary>
        /// <param name="type"> Data type of the field value. </param>
        /// <param name="valueString"> String value. </param>
        /// <param name="valueDate"> Date value in YYYY-MM-DD format (ISO 8601). </param>
        /// <param name="valueTime"> Time value in hh:mm:ss format (ISO 8601). </param>
        /// <param name="valuePhoneNumber"> Phone number value in E.164 format (ex. +19876543210). </param>
        /// <param name="valueNumber"> Floating point value. </param>
        /// <param name="valueInteger"> Integer value. </param>
        /// <param name="valueSelectionMark"> Selection mark value. </param>
        /// <param name="valueSignature"> Presence of signature. </param>
        /// <param name="valueCountryRegion"> 3-letter country code value (ISO 3166-1 alpha-3). </param>
        /// <param name="valueCurrency"> 3-letter currency code value (ISO 4217). </param>
        /// <param name="valueArray"> Array of field values. </param>
        /// <param name="valueObject"> Dictionary of named field values. </param>
        /// <param name="content"> Field content. </param>
        /// <param name="boundingRegions"> Bounding regions covering the field. </param>
        /// <param name="spans"> Location of the field in the reading order concatenated content. </param>
        /// <param name="confidence"> Confidence of correctly extracting the field. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentField"/> instance for mocking. </returns>
        public static DocumentField DocumentField(DocumentFieldType type = default, string valueString = null, DateTimeOffset? valueDate = null, TimeSpan? valueTime = null, string valuePhoneNumber = null, float? valueNumber = null, int? valueInteger = null, SelectionMarkState? valueSelectionMark = null, DocumentSignatureType? valueSignature = null, string valueCountryRegion = null, string valueCurrency = null, IEnumerable<DocumentField> valueArray = null, IReadOnlyDictionary<string, DocumentField> valueObject = null, string content = null, IEnumerable<BoundingRegion> boundingRegions = null, IEnumerable<DocumentSpan> spans = null, float? confidence = null)
        {
            valueArray ??= new List<DocumentField>();
            valueObject ??= new Dictionary<string, DocumentField>();
            boundingRegions ??= new List<BoundingRegion>();
            spans ??= new List<DocumentSpan>();

            return new DocumentField(type, valueString, valueDate, valueTime, valuePhoneNumber, valueNumber, valueInteger, valueSelectionMark, valueSignature, valueCountryRegion, valueCurrency, valueArray?.ToList(), valueObject, content, boundingRegions?.ToList(), spans?.ToList(), confidence);
        }

        /// <summary> Initializes a new instance of OperationInfo. </summary>
        /// <param name="operationId"> Operation ID. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="percentCompleted"> Operation progress (0-100). </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the operation was created. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="kind"> Type of operation. </param>
        /// <param name="resourceLocation"> URL of the resource targeted by this operation. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.OperationInfo"/> instance for mocking. </returns>
        public static OperationInfo OperationInfo(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, OperationKind? kind = null, string resourceLocation = null)
        {
            return new OperationInfo(operationId, status, percentCompleted, createdDateTime, lastUpdatedDateTime, kind, resourceLocation);
        }

        /// <summary> Initializes a new instance of GetOperationResponse. </summary>
        /// <param name="operationId"> Operation ID. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="percentCompleted"> Operation progress (0-100). </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the operation was created. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="kind"> Type of operation. </param>
        /// <param name="resourceLocation"> URL of the resource targeted by this operation. </param>
        /// <param name="error"> Encountered error. </param>
        /// <param name="result"> Operation result upon success. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.GetOperationResponse"/> instance for mocking. </returns>
        public static GetOperationResponse GetOperationResponse(string operationId = null, OperationStatus status = default, int? percentCompleted = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, OperationKind? kind = null, string resourceLocation = null, Error error = null, object result = null)
        {
            return new GetOperationResponse(operationId, status, percentCompleted, createdDateTime, lastUpdatedDateTime, kind, resourceLocation, error, result);
        }

        /// <summary> Initializes a new instance of ModelSummary. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="description"> Model description. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the model was created. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.ModelSummary"/> instance for mocking. </returns>
        public static ModelSummary ModelSummary(string modelId = null, string description = null, DateTimeOffset createdDateTime = default)
        {
            return new ModelSummary(modelId, description, createdDateTime);
        }

        /// <summary> Initializes a new instance of DocumentModelInfo. </summary>
        /// <param name="modelId"> Unique model name. </param>
        /// <param name="description"> Model description. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the model was created. </param>
        /// <param name="docTypes"> Supported document types. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentModelInfo"/> instance for mocking. </returns>
        public static DocumentModelInfo DocumentModelInfo(string modelId = null, string description = null, DateTimeOffset createdDateTime = default, IReadOnlyDictionary<string, DocTypeInfo> docTypes = null)
        {
            docTypes ??= new Dictionary<string, DocTypeInfo>();

            return new DocumentModelInfo(modelId, description, createdDateTime, docTypes);
        }

        /// <summary> Initializes a new instance of DocTypeInfo. </summary>
        /// <param name="description"> Model description. </param>
        /// <param name="fieldSchema"> Description of the document semantic schema using a JSON Schema style syntax. </param>
        /// <param name="fieldConfidence"> Estimated confidence for each field. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocTypeInfo"/> instance for mocking. </returns>
        public static DocTypeInfo DocTypeInfo(string description = null, IReadOnlyDictionary<string, DocumentFieldSchema> fieldSchema = null, IReadOnlyDictionary<string, float> fieldConfidence = null)
        {
            fieldSchema ??= new Dictionary<string, DocumentFieldSchema>();
            fieldConfidence ??= new Dictionary<string, float>();

            return new DocTypeInfo(description, fieldSchema, fieldConfidence);
        }

        /// <summary> Initializes a new instance of DocumentFieldSchema. </summary>
        /// <param name="type"> Semantic data type of the field value. </param>
        /// <param name="description"> Field description. </param>
        /// <param name="example"> Example field content. </param>
        /// <param name="items"> Field type schema of each array element. </param>
        /// <param name="properties"> Named sub-fields of the object field. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.DocumentFieldSchema"/> instance for mocking. </returns>
        public static DocumentFieldSchema DocumentFieldSchema(DocumentFieldType? type = null, string description = null, string example = null, DocumentFieldSchema items = null, IReadOnlyDictionary<string, DocumentFieldSchema> properties = null)
        {
            properties ??= new Dictionary<string, DocumentFieldSchema>();

            return new DocumentFieldSchema(type, description, example, items, properties);
        }

        /// <summary> Initializes a new instance of GetInfoResponse. </summary>
        /// <param name="customDocumentModels"> Info regarding custom document models. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.GetInfoResponse"/> instance for mocking. </returns>
        public static GetInfoResponse GetInfoResponse(CustomDocumentModelsInfo customDocumentModels = null)
        {
            return new GetInfoResponse(customDocumentModels);
        }

        /// <summary> Initializes a new instance of CustomDocumentModelsInfo. </summary>
        /// <param name="count"> Number of custom models in the current resource. </param>
        /// <param name="limit"> Maximum number of custom models supported in the current resource. </param>
        /// <returns> A new <see cref="FormRecognizer.Models.CustomDocumentModelsInfo"/> instance for mocking. </returns>
        public static CustomDocumentModelsInfo CustomDocumentModelsInfo(int count = default, int limit = default)
        {
            return new CustomDocumentModelsInfo(count, limit);
        }
    }
}
